library(mRMRe)
Idpn_N1<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Independent_N.csv", header = TRUE, sep=",")
str(Idpn_N1)
Idpn_N1[[2]]<-as.numeric(Idpn_N1[[2]])
Idpn_N1[[3]]<-as.numeric(Idpn_N1[[3]])
Idpn_N1[[4]]<-as.numeric(Idpn_N1[[4]])
Idpn_N1[[5]]<-as.numeric(Idpn_N1[[5]])
Idpn_N1[[6]]<-as.numeric(Idpn_N1[[6]])
Idpn_N1[[7]]<-as.numeric(Idpn_N1[[7]])
Idpn_N1[[8]]<-as.numeric(Idpn_N1[[8]])
Idpn_N1[[9]]<-as.numeric(Idpn_N1[[9]])
Idpn_N1[[10]]<-as.numeric(Idpn_N1[[10]])
Idpn_N1[[11]]<-as.numeric(Idpn_N1[[11]])
Idpn_N1[[12]]<-as.numeric(Idpn_N1[[12]])
Idpn_N1[[13]]<-as.numeric(Idpn_N1[[13]])
Idpn_N1[[14]]<-as.numeric(Idpn_N1[[14]])
Idpn_N1[[15]]<-as.numeric(Idpn_N1[[15]])
Idpn_N1[[16]]<-as.numeric(Idpn_N1[[16]])
Idpn_N1[[17]]<-as.numeric(Idpn_N1[[17]])
Idpn_N1[[33]]<-as.numeric(Idpn_N1[[33]])
Idpn_N1[[43]]<-as.numeric(Idpn_N1[[43]])
Idpn_N1[[48]]<-as.numeric(Idpn_N1[[48]])
Idpn_N1[[53]]<-as.numeric(Idpn_N1[[53]])
Idpn_N1[[93]]<-as.numeric(Idpn_N1[[93]])
str(Idpn_N1)
Idpn_N2<-mRMR.data(data=data.frame(Idpn_N1[,3:92, drop=FALSE]))
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=Idpn_N2, target_indices=90,
feature_count = 50)
solutions(MRMR_Test)
Idpn_C3 <- read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE, sep=",")[,-1:-2]
colnames(Idpn_C3)
datamrmr.se <- dplyr::select(Idpn_C3,87,84,60,80,71,88,85,28,82,56,16,6,55,81,77,23,65,76,34,54,53,25,62,73,58,45,66,89,2,15,70,42,79,57,67,9,69,75,49,27,78,86,72,24,39,26,52,22,4,12,class)
write.csv(datamrmr.se, file = "datamrmr50.csv",row.names = TRUE)
call_datamrmr<-read.csv("D:/independent_N/datamrmr50.csv", header = TRUE, sep=",")[,-1]
call_datamrmr<-read.csv("D:/independent N/datamrmr50.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst1 = mccr(hasilakhir, data_test$class)
fileName1='idpn_Linear_N_mrmr50.txt'
sink(fileName1, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
print(paste('MCC = ',mcc.tst1))
sink()
}
library(caret)
library(e1071)
library(mccr)
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst1 = mccr(hasilakhir, data_test$class)
fileName1='idpn_Linear_N_mrmr50.txt'
sink(fileName1, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
print(paste('MCC = ',mcc.tst1))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy3= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst2 = mccr(hasilakhir, data_test$class)
fileName2='idpn_polynomial_N_mrmr50.txt'
sink(fileName2, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy3)
print(paste('MCC = ',mcc.tst2))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy4= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst3 = mccr(hasilakhir, data_test$class)
fileName3='idpn_sigmoid_N_mrmr50.txt'
sink(fileName3, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy4)
print(paste('MCC = ',mcc.tst3))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy5= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst4 = mccr(hasilakhir, data_test$class)
fileName4='idpn_gausian_N_mrmr50.txt'
sink(fileName4, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy5)
print(paste('MCC = ',mcc.tst4))
sink()
}
#mrmr 25
MRMR_Test2<-mRMR.classic("mRMRe.Filter", data=Idpn_C2, target_indices=90,
feature_count = 25)
#mrmr 25
MRMR_Test2<-mRMR.classic("mRMRe.Filter", data=Idpn_N2, target_indices=90,
feature_count = 25)
solutions(MRMR_Test2)
datamrmr.se <- dplyr::select(Idpn_C3,87,84,60,80,71,88,85,28,82,56,16,6,55,81,77,23,65,76,34,54,53,25,62,73,58,class)
write.csv(datamrmr.se, file = "datamrmr25.csv",row.names = TRUE)
library(caret)
call_datamrmr25<-read.csv("D:/Independent N/datamrmr25.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy6= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst5 = mccr(hasilakhir, data_test$class)
fileName5='idpn_Linear_N_mrmr25.txt'
sink(fileName5, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy6)
print(paste('MCC = ',mcc.tst5))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy7= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst6 = mccr(hasilakhir, data_test$class)
fileName6='idpn_polynomial_N_mrmr25.txt'
sink(fileName6, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy7)
print(paste('MCC = ',mcc.tst6))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy8= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst7 = mccr(hasilakhir, data_test$class)
fileName7='idpn_sigmoid_N_mrmr25.txt'
sink(fileName7, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy8)
print(paste('MCC = ',mcc.tst7))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy9= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst8 = mccr(hasilakhir, data_test$class)
fileName8='idpn_gausian_N_mrmr25.txt'
sink(fileName8, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy9)
print(paste('MCC = ',mcc.tst8))
sink()
}
#mrmr 75
MRMR_Test3<-mRMR.classic("mRMRe.Filter", data=Idpn_N2, target_indices=90,
feature_count = 75)
solutions(MRMR_Test3)
datamrmr.se <- dplyr::select(Idpn_C3,87,84,60,80,71,88,85,28,82,56,16,6,55,81,77,23,65,76,34,54,53,25,62,73,58,45,66,89,2,15,70,42,79,57,67,9,69,75,49,27,78,86,72,24,39,26,52,
22,4,12,68,61,40,18,30,19,21,83,29,64,63,17,20,74,47,37,59,14,35,44,7,36,1,10,38,class)
write.csv(datamrmr.se, file = "datamrmr75.csv",row.names = TRUE)
call_datamrmr75<-read.csv("D:/Independent N/datamrmr75.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy10= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst9 = mccr(hasilakhir, data_test$class)
fileName9='idpn_Linear_N_mrmr75.txt'
sink(fileName9, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy10)
print(paste('MCC = ',mcc.tst9))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy11= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst10 = mccr(hasilakhir, data_test$class)
fileName10='idpn_polynomial_N_mrmr75.txt'
sink(fileName10, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy11)
print(paste('MCC = ',mcc.tst10))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy12= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst11 = mccr(hasilakhir, data_test$class)
fileName11='idpn_sigmoid_N_mrmr75.txt'
sink(fileName11, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy12)
print(paste('MCC = ',mcc.tst11))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy13= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst12 = mccr(hasilakhir, data_test$class)
fileName12='idpn_gausian_N_mrmr75.txt'
sink(fileName12, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy13)
print(paste('MCC = ',mcc.tst12))
sink()
}
N_Independent<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Independent_N.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy14= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst13 = mccr(hasilakhir, data_test$class)
fileName13='idpn_Linear_N.txt'
sink(fileName13, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy14)
print(paste('MCC = ',mcc.tst13))
sink()
}
library(caret)
library(e1071)
library(mccr)
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy14= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst13 = mccr(hasilakhir, data_test$class)
fileName13='idpn_Linear_N.txt'
sink(fileName13, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy14)
print(paste('MCC = ',mcc.tst13))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy14= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst13 = mccr(hasilakhir, data_test$class)
fileName13='idpn_Linear_N.txt'
sink(fileName13, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy14)
print(paste('MCC = ',mcc.tst13))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy15= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst14 = mccr(hasilakhir, data_test$class)
fileName14='idpn_polynomial_N.txt'
sink(fileName14, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy15)
print(paste('MCC = ',mcc.tst14))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy16= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst15 = mccr(hasilakhir, data_test$class)
fileName15='idpn_sigmoid_N.txt'
sink(fileName15, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy16)
print(paste('MCC = ',mcc.tst15))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy17= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst16 = mccr(hasilakhir, data_test$class)
fileName16='idpn_gausian_N.txt'
sink(fileName16, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy17)
print(paste('MCC = ',mcc.tst16))
sink()
}
