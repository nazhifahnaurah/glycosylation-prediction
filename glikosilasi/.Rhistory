if(nchar(sq)==windows){
cat(paste('>',NegIndependent_C[j,2],NegIndependent_C[j,3],'\n'))
cat(paste(sq,'\n'))
seq_iter[jumlah_seq]=sq
jumlah_seq=jumlah_seq+1
}
}
sink()
View(ACF_all)
str(NegIndependent_C)
#AAindex
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "NegIndependent_C.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_all = featureAAindex(seq)
AI_pos = featureAAindex(seq, "ANDN920101")
ACI_all = featureACI(seq)
ACI_ANDN920101 = featureACI(seq,"ANDN920101")
ACF_all = featureACF(seq,1)
ACF_ANDN920101 = featureACF(seq,3,"ANDN920101")
}
library(BioSeqClass)
#AAindex
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "NegIndependent_C.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_all = featureAAindex(seq)
AI_pos = featureAAindex(seq, "ANDN920101")
ACI_all = featureACI(seq)
ACI_ANDN920101 = featureACI(seq,"ANDN920101")
ACF_all = featureACF(seq,1)
ACF_ANDN920101 = featureACF(seq,3,"ANDN920101")
}
#AAindex
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "NegIndependent_C.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101") [,-16]
}
library(BioSeqClass)
#AAindex
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "NegIndependent_C.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101") [,-16]
}
#AAindex
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "NegIndependent_C.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101") [,-16]
}
data_NegIn_C<-read.csv("D:/BioMedik/glikosilasi/cnegatif_independent.csv", header = TRUE, sep=";")
data=cbind(data_NegIn_C,AI_neg)[,-1]
print(data)
write.csv(data, file = "Neg_Independent_C.csv",row.names = TRUE)
call_PosIndependentC<-read.csv("D:/BioMedik/PosIndependent_C/Pos_Independent_C.csv", header = TRUE, sep=",")
call_NegIndependentC<-read.csv("D:/BioMedik/GLIKOSILASI/Neg_Independent_C.csv", header = TRUE, sep=",")
Independent_C=rbind(call_PosIndependentC,call_NegIndependentC)
class = elevation <- matrix(0,40,1)
class = elevation[0:13,1] <- 1
class = elevation[14:40,0] <- 0
class = elevation
class = elevation = data.frame(class)
class = class
dataset_Independent=cbind(Independent_C,class)
View(data)
write.csv(dataset_Independent, file = "Independent_C.csv",row.names = TRUE)
c_Independent<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE,sep=",")
View(c_Independent)
c_Independent<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE,sep=",")[,-1]
View(c_Independent)
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
}
library(caret)
library(e1071)
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
}
library(caret)
library(e1071)
#install.packages("caret")
c_Independent<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
}
C_Independent<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
}
library(caret)
library(e1071)
C_Independent<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpN_Linear-1.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
sink()
}
library(BioSeqClass)
library(Biostrings)
if (interactive()) {
file_neg1 = file.path(path.package("BioSeqClass"), "example", "output_NegIndependent_C.fasta")
tmp_neg = readAAStringSet(file_neg1)
proteinSeq_neg = as.character(tmp_neg)
#CTD1_neg = featureCTD(proteinSeq_neg, class = elements("aminoacid"))
CTD2_neg = featureCTD(proteinSeq_neg, class = aaClass("aaV"))[,-22:-26]
CTD2_neg[is.na(CTD2_neg)] <- 0
}
#CTD  Negative
if (interactive()) {
file_neg1 = file.path(path.package("BioSeqClass"), "example", "output_NegIndependentC.fasta")
tmp_neg = readAAStringSet(file_neg1)
proteinSeq_neg = as.character(tmp_neg)
#CTD1_neg = featureCTD(proteinSeq_neg, class = elements("aminoacid"))
CTD2_neg = featureCTD(proteinSeq_neg, class = aaClass("aaV"))[,-22:-26]
CTD2_neg[is.na(CTD2_neg)] <- 0
}
if (interactive()) {
file_neg2 = file.path(path.package("BioSeqClass"), "example", "NegIndependent_C.pep")
seq1_neg = as.matrix(read.csv(file_neg2, header = F))[,1]
H1_neg = featureHydro(seq1_neg, "kpm")[,-16]
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "NegIndependent_C.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
data_NegIn_C<-read.csv("D:/BioMedik/glikosilasi/cnegatif_independent.csv", header = TRUE, sep=";")
data=cbind(data_NegIn_C,AI_neg,CTD2_neg,H1_neg,PAC4_neg)[,-1]
print(data)
write.csv(data, file = "Neg_Independent_C.csv",row.names = TRUE)
call_PosIndependentC<-read.csv("D:/BioMedik/PosIndependent_C/Pos_Independent_C.csv", header = TRUE, sep=",")
call_NegIndependentC<-read.csv("D:/BioMedik/GLIKOSILASI/Neg_Independent_C.csv", header = TRUE, sep=",")
Independent_C=rbind(call_PosIndependentC,call_NegIndependentC)
call_NegIndependentC<-read.csv("D:/BioMedik/glikosilasi/Neg_Independent_C.csv", header = TRUE, sep=",")
Independent_C=rbind(call_PosIndependentC,call_NegIndependentC)
call_PosIndependentC<-read.csv("D:/BioMedik/PosIndependent_C/Pos_Independent_C.csv", header = TRUE, sep=",")
call_PosIndependentC<-read.csv("D:/BioMedik/PosIndependent_C/Pos_Independent_C.csv", header = TRUE, sep=",")
Independent_C=rbind(call_PosIndependentC,call_NegIndependentC)
class = elevation <- matrix(0,40,1)
class = elevation[0:13,1] <- 1
class = elevation[14:40,0] <- 0
class = elevation
class = elevation = data.frame(class)
class = class
dataset_Independent=cbind(Independent_C,class)
write.csv(dataset_Independent, file = "Independent_C.csv",row.names = TRUE)
library(caret)
library(e1071)
C_Independent<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpN_Linear_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='Idpn_polynomial_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='Idpn_sigmoid_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='Idpn_gausian_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC5)
sink()
}
library(mRMRe)
Idpn_C1<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE, sep=",")
#BenchMark_N1<-as.numeric(BenchMark_N1)
colnames(Idpn_N1)
#BenchMark_N1<-as.numeric(BenchMark_N1)
colnames(Idpn_C1)
Idpn_C1[[2]]<-as.numeric(Idpn_C1[[2]])
Idpn_C1[[3]]<-as.numeric(Idpn_C1[[3]])
Idpn_C1[[4]]<-as.numeric(Idpn_C1[[4]])
Idpn_C1[[5]]<-as.numeric(Idpn_C1[[5]])
Idpn_C1[[6]]<-as.numeric(Idpn_C1[[6]])
Idpn_C1[[7]]<-as.numeric(Idpn_C1[[7]])
Idpn_C1[[8]]<-as.numeric(Idpn_C1[[8]])
Idpn_C1[[9]]<-as.numeric(Idpn_C1[[9]])
Idpn_C1[[10]]<-as.numeric(Idpn_C1[[10]])
Idpn_C1[[11]]<-as.numeric(Idpn_C1[[11]])
Idpn_C1[[12]]<-as.numeric(Idpn_C1[[12]])
Idpn_C1[[13]]<-as.numeric(Idpn_C1[[13]])
Idpn_C1[[14]]<-as.numeric(Idpn_C1[[14]])
Idpn_C1[[15]]<-as.numeric(Idpn_C1[[15]])
Idpn_C1[[16]]<-as.numeric(Idpn_C1[[16]])
Idpn_C1[[17]]<-as.numeric(Idpn_C1[[17]])
Idpn_C1[[33]]<-as.numeric(Idpn_C1[[33]])
Idpn_C1[[43]]<-as.numeric(Idpn_C1[[43]])
Idpn_C1[[48]]<-as.numeric(Idpn_C1[[48]])
Idpn_C1[[53]]<-as.numeric(Idpn_C1[[53]])
Idpn_C1[[93]]<-as.numeric(Idpn_C1[[93]])
str(Idpn_C1)
Idpn_C2<-mRMR.data(data=data.frame(Idpn_C1[,3:92, drop=FALSE]))
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=Idpn_C2, target_indices=90,
feature_count = 50)
solutions(MRMR_Test)
Idpn_C3 <- read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE, sep=",")[,-1:-2]
colnames(Idpn_C3)
datamrmr.se <- dplyr::select(Idpn_C3,78,80,75,7,18,39,70,23,27,68,16,66,88,82,43,9,20,1,76,50,79,65,54,57,72,48,83,64,17,58,89,77,74,85,22,63,62,52,11,84,86,37,61,6,60,25,56,29,81,33,class)
write.csv(datamrmr.se, file = "datamrmr.csv",row.names = TRUE)
library(caret)
library(e1071)
call_datamrmr<-read.csv("D:/BioMedik/glikosilasi/datamrmr.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_Linear_C_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_polynomial_C_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_sigmoid_C_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_gausian_C_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC5)
sink()
}
View(AI_neg)
View(Independent_C)
library(mRMRe)
Idpn_C1<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE, sep=",")
#BenchMark_N1<-as.numeric(BenchMark_N1)
colnames(Idpn_C1)
str(Idpn_C1)
Idpn_C2<-mRMR.data(data=data.frame(Idpn_C1[,3:92, drop=FALSE]))
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=Idpn_C2, target_indices=90,
feature_count = 50)
solutions(MRMR_Test)
View(Independent_C)
View(Independent_C)
View(Independent_C)
View(call_NegIndependentC)
library(BioSeqClass)
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "NegIndependent_C.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101") [,-16]
}
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "dataset1P.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101")
}
file = file.path(path.package("BioSeqClass"), "example", "dataset1P.pep")[-1,-1:-3]
file = file.path(path.package("BioSeqClass"), "example", "dataset1P.pep")[,-1:-3]
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "dataset1P.pep")[,-1:-3]
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101")
}
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "dataset1P.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101")
}
file = file.path(path.package("BioSeqClass"), "example", "dataset1P.pep")
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "dataset1P.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101")
}
View(AI_neg)
View(CTD2_neg)
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "positif.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
library(BioSeqClass)
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "positif.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
file_neg3 = file.path(path.package("BioSeqClass"), "example", "positif.pep")
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "positif.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "positif.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep =""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "positif.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep =""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "positif.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep =""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "positif.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep =""))
PAC4_neg = featurePseudoAAComp(seq2_neg,)
}
PAC4_neg = featurePseudoAAComp(seq2_neg,2)
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "positif.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep =""))
PAC4_neg = featurePseudoAAComp(seq2_neg,2)
}
