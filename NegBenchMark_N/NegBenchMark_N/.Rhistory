AI_pos = featureAAindex(seq, "ANDN920101")
ACI_all = featureACI(seq)
ACI_ANDN920101 = featureACI(seq,"ANDN920101")
ACF_all = featureACF(seq,1)
ACF_ANDN920101 = featureACF(seq,3,"ANDN920101")
}
data_NegBenchMark_N<-read.csv("D:/BioMedik/NegBenchMark_N/NegBenchMark_N/NegBenchMark_N.csv", header = TRUE, sep=";")
View(data_NegBenchMark_N)
data=cbind(data_NegBenchMark_N,AI_neg)
#AAindex
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "NegBenchMark_N.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101")
}
library(BioSeqClass)
library(Biostrings)
#AAindex
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "NegBenchMark_N.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101")
}
data=cbind(data_NegBenchMark_N,AI_neg)
View(data)
data=cbind(data_NegBenchMark_N,AI_neg)[,-1]
View(data)
AI_neg = featureAAindex(seq, "ANDN920101")[,-16]
View(AI_neg)
data=cbind(data_NegBenchMark_N,AI_neg)[,-1]
print(data)
write.csv(data, file = "Neg_BenchMark_C.csv",row.names = TRUE)
write.csv(data, file = "Neg_BenchMark_N.csv",row.names = TRUE)
call_PosBenchMarkN<-read.csv("D:/BioMedik/PosBenchMark_N/PosBenchMark_N/PosBenchMark_N/Pos_BenchMark_N.csv", header = TRUE, sep=",")
call_PosBenchMarkN<-read.csv("D:/BioMedik/PosBenchMark_N/PosBenchMark_N/Pos_BenchMark_N.csv", header = TRUE, sep=",")
call_NegBenchMarkN<-read.csv("D:/BioMedik/NegBenchMark_N/NegBenchMark_N/Neg_BenchMark_N.csv", header = TRUE, sep=",")
BenchMark_N=rbind(call_PosBenchMarkN,call_NegBenchMarkN)
class = elevation <- matrix(0,892,1)
class = elevation[0:333,1] <- 1
class = elevation[334:892,0] <- 0
class = elevation
class = elevation = data.frame(class)
class = class
dataset_BenchMark=cbind(BenchMark_N,class)
write.csv(dataset_BenchMark, file = "BenchMark_N.csv",row.names = TRUE)
View(BenchMark_N)
library(mRMRe)
BenchMark_N1<-read.csv("D:/BioMedik/NegBenchMark_N/NegBenchMark_N/BenchMark_N.csv", header = TRUE, sep=",")
View(BenchMark_N1)
#BenchMark_N1<-as.numeric(BenchMark_N1)
str(BenchMark_N1)
BenchMark_C[[3]]<-as.numeric(BenchMark_C[[3]])
BenchMark_C[[4]]<-as.numeric(BenchMark_C[[4]])
BenchMark_C[[5]]<-as.numeric(BenchMark_C[[5]])
BenchMark_C[[6]]<-as.numeric(BenchMark_C[[6]])
BenchMark_C[[7]]<-as.numeric(BenchMark_C[[7]])
BenchMark_C[[8]]<-as.numeric(BenchMark_C[[8]])
BenchMark_C[[9]]<-as.numeric(BenchMark_C[[9]])
BenchMark_C[[10]]<-as.numeric(BenchMark_C[[10]])
BenchMark_C[[11]]<-as.numeric(BenchMark_C[[11]])
BenchMark_C[[12]]<-as.numeric(BenchMark_C[[12]])
BenchMark_C[[13]]<-as.numeric(BenchMark_C[[13]])
BenchMark_C[[14]]<-as.numeric(BenchMark_C[[14]])
BenchMark_C[[15]]<-as.numeric(BenchMark_C[[15]])
BenchMark_C[[16]]<-as.numeric(BenchMark_C[[16]])
BenchMark_C[[17]]<-as.numeric(BenchMark_C[[17]])
BenchMark_C[[33]]<-as.numeric(BenchMark_C[[33]])
BenchMark_N1[[33]]<-as.numeric(BenchMark_N1[[33]])
BenchMark_N1[[3]]<-as.numeric(BenchMark_N1[[3]])
BenchMark_N1[[4]]<-as.numeric(BenchMark_N1[[4]])
BenchMark_N1[[5]]<-as.numeric(BenchMark_N1[[5]])
BenchMark_N1[[6]]<-as.numeric(BenchMark_N1[[6]])
BenchMark_N1[[7]]<-as.numeric(BenchMark_N1[[7]])
BenchMark_N1[[8]]<-as.numeric(BenchMark_N1[[8]])
BenchMark_N1[[9]]<-as.numeric(BenchMark_N1[[9]])
BenchMark_N1[[10]]<-as.numeric(BenchMark_N1[[10]])
BenchMark_N1[[11]]<-as.numeric(BenchMark_N1[[11]])
BenchMark_N1[[12]]<-as.numeric(BenchMark_N1[[12]])
BenchMark_N1[[13]]<-as.numeric(BenchMark_N1[[13]])
BenchMark_N1[[14]]<-as.numeric(BenchMark_N1[[14]])
BenchMark_N1[[15]]<-as.numeric(BenchMark_N1[[15]])
BenchMark_N1[[16]]<-as.numeric(BenchMark_N1[[16]])
BenchMark_N1[[17]]<-as.numeric(BenchMark_N1[[17]])
BenchMark_N1[[33]]<-as.numeric(BenchMark_N1[[33]])
#BenchMark_N1<-as.numeric(BenchMark_N1)
str(BenchMark_N1)
BenchMark_N1<-mRMR.data(data=data.frame(BenchMark_N1[,3:32, drop=FALSE]))
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=BenchMark_N1, target_indices=30,
feature_count = 15)
solutions(MRMR_Test)
BenchMark_N2 <- read.csv("D:/BioMedik/NegBenchMark_N/NegBenchMark_N/BenchMark_N.csv", header = TRUE, sep=",")[,-1]
View(BenchMark_N2)
colnames(BenchMark_N2)
datamrmr.se <- dplyr::select(BenchMark_N2,1,26,3,18,28,27,30,29,25,21,20,17,22,19,23,16,class)
View(datamrmr.se)
write.csv(datamrmr.se, file = "datamrmr.csv",row.names = TRUE)
library(caret)
library(e1071)
#install.packages("caret")
call_datamrmr<-read.csv("D:/BioMedik/NegBenchMark_N/NegBenchMark_N/datamrmr.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpN_Linear-1.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
sink()
}
View(BenchMark_N2)
library(BioSeqClass)
library(Biostrings)
#CTD  posative
if (interactive()) {
file_pos1 = file.path(path.package("BioSeqClass"), "example", "output_posBenchMark_C.txt")
tmp_pos = readAAStringSet(file_pos1)
proteinSeq_pos = as.character(tmp_pos)
#CTD1_pos = featureCTD(proteinSeq_pos, class = elements("aminoacid"))
CTD2_pos = featureCTD(proteinSeq_pos, class = aaClass("aaV"))
#CTD2_pos[is.na(CTD2_pos)] <- 0
}
View(class)
View(CTD2_pos)
#CTD  posative
if (interactive()) {
file_pos1 = file.path(path.package("BioSeqClass"), "example", "output_posBenchMark_C.txt")
tmp_pos = readAAStringSet(file_pos1)
proteinSeq_pos = as.character(tmp_pos)
#CTD1_pos = featureCTD(proteinSeq_pos, class = elements("aminoacid"))
CTD2_pos = featureCTD(proteinSeq_pos, class = aaClass("aaV"))[,-22:-26]
CTD2_pos[is.na(CTD2_pos)] <- 0
}
View(CTD2_pos)
#CTD  posative
if (interactive()) {
file_pos1 = file.path(path.package("BioSeqClass"), "example", "output_posBenchMark_N.fasta")
tmp_pos = readAAStringSet(file_pos1)
proteinSeq_pos = as.character(tmp_pos)
#CTD1_pos = featureCTD(proteinSeq_pos, class = elements("aminoacid"))
CTD2_pos = featureCTD(proteinSeq_pos, class = aaClass("aaV"))[,-22:-26]
CTD2_pos[is.na(CTD2_pos)] <- 0
}
View(CTD2_pos)
if (interactive()) {
file_pos2 = file.path(path.package("BioSeqClass"), "example", "posBenchMark_N.pep")
seq1_pos = as.matrix(read.csv(file_pos2, header = F))[,1]
H1_pos = featureHydro(seq1_pos, "kpm")[,-16]
}
View(H1_pos)
library(protr)
NegBenchMark_N<-read.csv("D:/BioMedik/Datasets Glycomine/NegBenchMark_N.txt", header = FALSE, sep="\t")
windows=15;
jumlah_seq=1
seq_iter=array()
sink('output_NegBenchMark_N.fasta')
for(j in 1:nrow(NegBenchMark_N)){
prots<-getUniProt(NegBenchMark_N[j,2])
start=NegBenchMark_N[j,3]-((windows-1)/2)
end=NegBenchMark_N[j,3]+((windows-1)/2)
sq=substr(prots[[1]],start,end)
#print(sq)
#print(paste("",seq))
if(nchar(sq)==windows){
cat(paste('>',NegBenchMark_N[j,2],NegBenchMark_N[j,3],'\n'))
cat(paste(sq,'\n'))
seq_iter[jumlah_seq]=sq
jumlah_seq=jumlah_seq+1
}
}
sink()
library(protr)
NegBenchMark_N<-read.csv("D:/BioMedik/Datasets Glycomine/NegBenchMark_N.txt", header = FALSE, sep="\t")
windows=15;
jumlah_seq=1
seq_iter=array()
sink('NegBenchMark_N.fasta')
for(j in 1:nrow(NegBenchMark_N)){
prots<-getUniProt(NegBenchMark_N[j,2])
start=NegBenchMark_N[j,3]-((windows-1)/2)
end=NegBenchMark_N[j,3]+((windows-1)/2)
sq=substr(prots[[1]],start,end)
#print(sq)
#print(paste("",seq))
if(nchar(sq)==windows){
cat(paste(sq,'\n'))
seq_iter[jumlah_seq]=sq
jumlah_seq=jumlah_seq+1
}
}
sink()
#AAindex
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "NegBenchMark_N.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101")[,-16]
}
#CTD  negative
if (interactive()) {
file_neg1 = file.path(path.package("BioSeqClass"), "example", "output_negBenchMark_N.fasta")
tmp_neg = readAAStringSet(file_neg1)
proteinSeq_neg = as.character(tmp_neg)
#CTD1_neg = featureCTD(proteinSeq_neg, class = elements("aminoacid"))
CTD2_neg = featureCTD(proteinSeq_neg, class = aaClass("aaV"))[,-22:-26]
CTD2_neg[is.na(CTD2_neg)] <- 0
}
if (interactive()) {
file_neg1 = file.path(path.package("BioSeqClass"), "example", "output_negBenchMark_N.txt")
tmp_neg = readAAStringSet(file_neg1)
proteinSeq_neg = as.character(tmp_neg)
#CTD1_neg = featureCTD(proteinSeq_neg, class = elements("aminoacid"))
CTD2_neg = featureCTD(proteinSeq_neg, class = aaClass("aaV"))[,-22:-26]
CTD2_neg[is.na(CTD2_neg)] <- 0
}
View(CTD2_neg)
if (interactive()) {
file_neg2 = file.path(path.package("BioSeqClass"), "example", "negBenchMark_N.pep")
seq1_neg = as.matrix(read.csv(file_neg2, header = F))[,1]
H1_neg = featureHydro(seq1_neg, "kpm")[,-16]
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "NegBenchMark_C.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
View(PAC4_neg)
data_NegBenchMark_N<-read.csv("D:/BioMedik/NegBenchMark_N/NegBenchMark_N/NegBenchMark_N.csv", header = TRUE, sep=";")
data_neg=cbind(data_NegBenchMark_N,AI_neg,CTD2_neg,H1_neg,PAC4_neg)[,-1]
print(data_neg)
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "NegBenchMark_N.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
data_neg=cbind(data_NegBenchMark_N,AI_neg,CTD2_neg,H1_neg,PAC4_neg)[,-1]
print(data_neg)
write.csv(data, file = "Neg_BenchMark_N.csv",row.names = TRUE)
write.csv(data_neg, file = "Neg_BenchMark_N.csv",row.names = TRUE)
if (interactive()) {
file_neg2 = file.path(path.package("BioSeqClass"), "example", "NegBenchMark_N.pep")
seq1_neg = as.matrix(read.csv(file_neg2, header = F))[,1]
H1_neg = featureHydro(seq1_neg, "kpm")[,-16]
}
data_neg=cbind(data_NegBenchMark_N,AI_neg,CTD2_neg,H1_neg,PAC4_neg)[,-1]
print(data_neg)
write.csv(data_neg, file = "Neg_BenchMark_N.csv",row.names = TRUE)
#CTD  negative
if (interactive()) {
file_neg1 = file.path(path.package("BioSeqClass"), "example", "output_NegBenchMark_N.txt")
tmp_neg = readAAStringSet(file_neg1)
proteinSeq_neg = as.character(tmp_neg)
#CTD1_neg = featureCTD(proteinSeq_neg, class = elements("aminoacid"))
CTD2_neg = featureCTD(proteinSeq_neg, class = aaClass("aaV"))[,-22:-26]
CTD2_neg[is.na(CTD2_neg)] <- 0
}
data_neg=cbind(data_NegBenchMark_N,AI_neg,CTD2_neg,H1_neg,PAC4_neg)[,-1]
print(data_neg)
write.csv(data_neg, file = "Neg_BenchMark_N.csv",row.names = TRUE)
call_PosBenchMarkN<-read.csv("D:/BioMedik/PosBenchMark_N/PosBenchMark_N/Pos_BenchMark_N.csv", header = TRUE, sep=",")
call_NegBenchMarkN<-read.csv("D:/BioMedik/NegBenchMark_N/NegBenchMark_N/Neg_BenchMark_N.csv", header = TRUE, sep=",")
BenchMark_N=rbind(call_PosBenchMarkN,call_NegBenchMarkN)
View(data_NegBenchMark_N)
View(data_neg)
data_neg=cbind(data_NegBenchMark_N,AI_neg,CTD2_neg,H1_neg,PAC4_neg)[,-1]
print(data_neg)
write.csv(data_neg, file = "Neg_BenchMark_N.csv",row.names = TRUE)
call_PosBenchMarkN<-read.csv("D:/BioMedik/PosBenchMark_N/PosBenchMark_N/Pos_BenchMark_N.csv", header = TRUE, sep=",")
call_NegBenchMarkN<-read.csv("D:/BioMedik/NegBenchMark_N/NegBenchMark_N/Neg_BenchMark_N.csv", header = TRUE, sep=",")
BenchMark_N=rbind(call_PosBenchMarkN,call_NegBenchMarkN)
BenchMark_N=rbind(call_PosBenchMarkN,call_NegBenchMarkN)
View(call_PosBenchMarkN)
call_PosBenchMarkN<-read.csv("D:/BioMedik/PosBenchMark_N/PosBenchMark_N/Pos_BenchMark_N.csv", header = TRUE, sep=",")
BenchMark_N=rbind(call_PosBenchMarkN,call_NegBenchMarkN)
class = elevation <- matrix(0,892,1)
class = elevation[0:333,1] <- 1
class = elevation[334:892,0] <- 0
class = elevation
class = elevation = data.frame(class)
class = class
dataset_BenchMark=cbind(BenchMark_N,class)
write.csv(dataset_BenchMark, file = "BenchMark_N.csv",row.names = TRUE)
library(mRMRe)
BenchMark_N1<-read.csv("D:/BioMedik/NegBenchMark_N/NegBenchMark_N/BenchMark_N.csv", header = TRUE, sep=",")
#BenchMark_N1<-as.numeric(BenchMark_N1)
str(BenchMark_N1)
BenchMark_N[[3]]<-as.numeric(BenchMark_N[[3]])
BenchMark_N[[4]]<-as.numeric(BenchMark_N[[4]])
BenchMark_N[[5]]<-as.numeric(BenchMark_N[[5]])
BenchMark_N[[6]]<-as.numeric(BenchMark_N[[6]])
BenchMark_N[[7]]<-as.numeric(BenchMark_N[[7]])
BenchMark_N[[8]]<-as.numeric(BenchMark_N[[8]])
BenchMark_N[[9]]<-as.numeric(BenchMark_N[[9]])
BenchMark_N[[10]]<-as.numeric(BenchMark_N[[10]])
BenchMark_N[[11]]<-as.numeric(BenchMark_N[[11]])
BenchMark_N[[12]]<-as.numeric(BenchMark_N[[12]])
BenchMark_N[[13]]<-as.numeric(BenchMark_N[[13]])
BenchMark_N[[14]]<-as.numeric(BenchMark_N[[14]])
BenchMark_N[[15]]<-as.numeric(BenchMark_N[[15]])
BenchMark_N[[16]]<-as.numeric(BenchMark_N[[16]])
BenchMark_N[[17]]<-as.numeric(BenchMark_N[[17]])
BenchMark_N[[33]]<-as.numeric(BenchMark_N[[33]])
BenchMark_N[[43]]<-as.numeric(BenchMark_N[[43]])
BenchMark_N[[48]]<-as.numeric(BenchMark_N[[48]])
BenchMark_N[[53]]<-as.numeric(BenchMark_N[[53]])
#BenchMark_N1<-as.numeric(BenchMark_N1)
str(BenchMark_N1)
BenchMark_N1[[3]]<-as.numeric(BenchMark_N1[[3]])
BenchMark_N1[[4]]<-as.numeric(BenchMark_N1[[4]])
BenchMark_N1[[5]]<-as.numeric(BenchMark_N1[[5]])
BenchMark_N1[[6]]<-as.numeric(BenchMark_N1[[6]])
BenchMark_N1[[7]]<-as.numeric(BenchMark_N1[[7]])
BenchMark_N1[[8]]<-as.numeric(BenchMark_N1[[8]])
BenchMark_N1[[9]]<-as.numeric(BenchMark_N1[[9]])
BenchMark_N1[[10]]<-as.numeric(BenchMark_N1[[10]])
BenchMark_N1[[11]]<-as.numeric(BenchMark_N1[[11]])
BenchMark_N1[[12]]<-as.numeric(BenchMark_N1[[12]])
BenchMark_N1[[13]]<-as.numeric(BenchMark_N1[[13]])
BenchMark_N1[[14]]<-as.numeric(BenchMark_N1[[14]])
BenchMark_N1[[15]]<-as.numeric(BenchMark_N1[[15]])
BenchMark_N1[[16]]<-as.numeric(BenchMark_N1[[16]])
BenchMark_N1[[17]]<-as.numeric(BenchMark_N1[[17]])
BenchMark_N1[[33]]<-as.numeric(BenchMark_N1[[33]])
BenchMark_N1[[43]]<-as.numeric(BenchMark_N1[[43]])
BenchMark_N1[[48]]<-as.numeric(BenchMark_N1[[48]])
BenchMark_N1[[53]]<-as.numeric(BenchMark_N1[[53]])
#BenchMark_N1<-as.numeric(BenchMark_N1)
str(BenchMark_N1)
BenchMark_N1<-mRMR.data(data=data.frame(BenchMark_N1[,3:92, drop=FALSE]))
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=BenchMark_N1, target_indices=90,
feature_count = 50)
solutions(MRMR_Test)
BenchMark_N2 <- read.csv("D:/BioMedik/NegBenchMark_N/NegBenchMark_N/BenchMark_N.csv", header = TRUE, sep=",")[,-1:-2]
View(BenchMark_N2)
colnames(BenchMark_N2)
datamrmr.se <- dplyr::select(BenchMark_N2,88,89,87,67,14,6,28,26,30,20,71,22,1,24,47,29,27,25,69,21,53,19,85,59,52,73,18,68,72,75,77,45,79,81,82,78,38,80,10,86,70,40,66,84,76,65,58,54,64,55,class)
write.csv(datamrmr.se, file = "datamrmr.csv",row.names = TRUE)
library(caret)
library(e1071)
call_datamrmr<-read.csv("D:/BioMedik/NegBenchMark_N/NegBenchMark_N/datamrmr.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='Benchmark_Linear_N.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_polynomial_N.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_sigmoid_N.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_gausian_N.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC5)
sink()
}
library(caret)
library(e1071)
Tanpa_BenchMark_N<-read.csv("D:/BioMedik/NegBenchMark_N/NegBenchMark_N/BenchMark_N.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_N$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_N[indeks_data,]
data_test <- Tanpa_BenchMark_N[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyN_2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_Linear_N_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyN_2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_N$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_N[indeks_data,]
data_test <- Tanpa_BenchMark_N[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyN_3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_polynomial_N_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyN_3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_N$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_N[indeks_data,]
data_test <- Tanpa_BenchMark_N[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyN_4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_sigmoid_N_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyN_4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_N$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_N[indeks_data,]
data_test <- Tanpa_BenchMark_N[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyN_5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_gausian_N_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyN_5)
sink()
}
