kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy6= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst5 = mccr(hasilakhir, data_test$class)
fileName5='idpn_Linear_C_mrmr25.txt'
sink(fileName5, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy6)
print(paste('MCC = ',mcc.tst5))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy7= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst6 = mccr(hasilakhir, data_test$class)
fileName6='idpn_polynomialC_mrmr25.txt'
sink(fileName6, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy7)
print(paste('MCC = ',mcc.tst6))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy8= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst7 = mccr(hasilakhir, data_test$class)
fileName7='idpn_sigmoid_C_mrmr25.txt'
sink(fileName7, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy8)
print(paste('MCC = ',mcc.tst7))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy9= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst8 = mccr(hasilakhir, data_test$class)
fileName8='idpn_gausian_C_mrmr25.txt'
sink(fileName8, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy9)
print(paste('MCC = ',mcc.tst8))
sink()
}
call_datamrmr25<-read.csv("D:/benchmark C/datamrmr25.csv", header = TRUE, sep=",")[,-1]
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy9= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst8 = mccr(hasilakhir, data_test$class)
fileName8='bench_gausian_C_mrmr25.txt'
sink(fileName8, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy9)
print(paste('MCC = ',mcc.tst8))
sink()
}
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy8= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst7 = mccr(hasilakhir, data_test$class)
fileName7='bench_sigmoid_C_mrmr25.txt'
sink(fileName7, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy8)
print(paste('MCC = ',mcc.tst7))
sink()
}
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy7= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst6 = mccr(hasilakhir, data_test$class)
fileName6='bench_polynomialC_mrmr25.txt'
sink(fileName6, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy7)
print(paste('MCC = ',mcc.tst6))
sink()
}
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy6= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst5 = mccr(hasilakhir, data_test$class)
fileName5='bench_Linear_C_mrmr25.txt'
sink(fileName5, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy6)
print(paste('MCC = ',mcc.tst5))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy6= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst5 = mccr(hasilakhir, data_test$class)
fileName5='bench_Linear_C_mrmr25.txt'
sink(fileName5, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy6)
print(paste('MCC = ',mcc.tst5))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy7= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst6 = mccr(hasilakhir, data_test$class)
fileName6='bench_polynomialC_mrmr25.txt'
sink(fileName6, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy7)
print(paste('MCC = ',mcc.tst6))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy8= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst7 = mccr(hasilakhir, data_test$class)
fileName7='bench_sigmoid_C_mrmr25.txt'
sink(fileName7, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy8)
print(paste('MCC = ',mcc.tst7))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy9= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst8 = mccr(hasilakhir, data_test$class)
fileName8='bench_gausian_C_mrmr25.txt'
sink(fileName8, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy9)
print(paste('MCC = ',mcc.tst8))
sink()
}
#mrmr 75
MRMR_Test3<-mRMR.classic("mRMRe.Filter", data=Bench_C2, target_indices=90,
feature_count = 75)
solutions(MRMR_Test3)
BenchMark_C2<-read.csv("D:/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE, sep=",")[,-1:-2]
datamrmr.se <- dplyr::select(BenchMark_C2,76,81,80,8,89,73,33,87,5,22,10,57,26,62,31,66,88,63,14,86,79,55,29,85,42,64,83,9,21,68,16,72,56,45,60,61,40,3,53,36,38,70,59,7,25,75,65,58,11,71,
50,30,18,19,20,84,24,78,15,47,52,28,69,23,27,4,77,17,54,1,44,67,74,12,37,class)
write.csv(datamrmr.se, file = "datamrmr75.csv",row.names = TRUE)
call_datamrmr75<-read.csv("D:/benchmark C/datamrmr75.csv", header = TRUE, sep=",")[,-1]
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy10= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst9 = mccr(hasilakhir, data_test$class)
fileName9='bench_Linear_C_mrmr75.txt'
sink(fileName9, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy10)
print(paste('MCC = ',mcc.tst9))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy11= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst10 = mccr(hasilakhir, data_test$class)
fileName10='bench_polynomialC_mrmr75.txt'
sink(fileName10, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy11)
print(paste('MCC = ',mcc.tst10))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy12= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst11 = mccr(hasilakhir, data_test$class)
fileName11='bench_sigmoid_C_mrmr75.txt'
sink(fileName11, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy12)
print(paste('MCC = ',mcc.tst11))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy13= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst12 = mccr(hasilakhir, data_test$class)
fileName12='bench_gausian_C_mrmr75.txt'
sink(fileName12, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy13)
print(paste('MCC = ',mcc.tst12))
sink()
}
C_Independent<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy14= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst13 = mccr(hasilakhir, data_test$class)
fileName13='bench_Linear_C.txt'
sink(fileName13, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy14)
print(paste('MCC = ',mcc.tst13))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy15= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst14 = mccr(hasilakhir, data_test$class)
fileName14='bench_polynomialC.txt'
sink(fileName14, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy15)
print(paste('MCC = ',mcc.tst14))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy16= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst15 = mccr(hasilakhir, data_test$class)
fileName15='bench_sigmoid_C.txt'
sink(fileName15, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy16)
print(paste('MCC = ',mcc.tst15))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy17= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst16 = mccr(hasilakhir, data_test$class)
fileName16='bench_gausian_C.txt'
sink(fileName16, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy17)
print(paste('MCC = ',mcc.tst16))
sink()
}
library(mRMRe)
Bench_C1<-read.csv("D:/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE, sep=",")
colnames(Bench_C1)
str(Bench_C1)
Bench_C2<-mRMR.data(data=data.frame(Bench_C1[,3:92, drop=FALSE]))
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=Bench_C2, target_indices=90,
feature_count = 50)
solutions(MRMR_Test)
library(mRMRe)
MRMR_Test2<-mRMR.classic("mRMRe.Filter", data=Bench_C2, target_indices=90,
feature_count = 25)
solutions(MRMR_Test2)
library(mRMRe)
kanker<-read.csv("D:/kanker1.csv", header = TRUE, sep=",")
colnames(kanker)
str(Bench_C1)
knkr<-mRMR.data(data=data.frame(kanker[,2:5, drop=FALSE]))
str(kanker)
kanker<-read.csv("D:/kanker1.csv", header = TRUE, sep=",")
View(kanker)
View(Bench_C1)
knkr<-mRMR.data(data=data.frame(kanker[,2:4, drop=FALSE]))
str(kanker)
str(Bench_C1)
str(kanker)
kanker<-read.csv("D:/kanker2.csv", header = TRUE, sep=",")
str(kanker)
View(kanker)
str(kanker)
str(kanker)
str(kanker)
View(kanker)
kanker<-read.csv("D:/kanker3.csv", header = TRUE, sep=";")
str(kanker)
knkr<-mRMR.data(data=data.frame(kanker[,2:4, drop=FALSE]))
knkr<-mRMR.data(data=data.frame(kanker[,2:4, drop=FALSE]))
knkr<-mRMR.data(data=data.frame(kanker[,2:3, drop=FALSE]))
knkr<-mRMR.data(data=data.frame(kanker[,2:4, drop=FALSE]))
str(kanker)
knkr<-mRMR.data(data=data.frame(kanker[,2:4]))
library(mRMRe)
kanker<-read.csv("D:/kanker3.csv", header = TRUE, sep=";")
str(kanker)
knkr<-mRMR.data(data=data.frame(kanker[,2:4]))
knkr<-mRMR.data(data=data.frame(kanker[,2:4]))
var_kanker<-kanker[,-1]
View(var_kanker)
var_kanker<-kanker[,-4]
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=var_kanker, target_indices=3,
feature_count = 2)
knkr<-mRMR.data(data=data.frame(var_kanker))
knkr<-mRMR.data(data=data.frame(as.numeric(var_kanker))
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=var_kanker, target_indices=3,
feature_count = 2)
knkr<-mRMR.data(data=data.frame(as.numeric(var_kanker)))
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=knkr, target_indices=3,
feature_count = 2)
knkr<-mRMR.data(data=data.frame(as.numeric(var_kanker)))
knkr<-mRMR.data(data=data.frame(as.integer(var_kanker)))
