View(data_NegBenchMark_O)
data=cbind(data_NegBenchMark_O,AI_neg)
print(data)
write.csv(data, file = "Neg_BenchMark_O.csv",row.names = TRUE)
call_PosBenchmarkO<-read.csv("D:/BioMedik/PosBenchMark_O/Pos_BenchMark_O.csv", header = TRUE, sep=";")
View(call_PosBenchmarkO)
call_PosBenchmarkO<-read.csv("D:/BioMedik/PosBenchMark_O/Pos_BenchMark_O.csv", header = TRUE, sep=",")
call_NegBenchmarkO<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/Neg_BenchMark_O.csv", header = TRUE, sep=",")
View(call_NegBenchmarkO)
View(call_NegBenchmarkO)
data=cbind(data_NegBenchMark_O,AI_neg)[,-1]
print(data)
write.csv(data, file = "Neg_BenchMark_O.csv",row.names = TRUE)
call_NegBenchmarkO<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/Neg_BenchMark_O.csv", header = TRUE, sep=",")
View(call_NegBenchmarkO)
View(call_PosBenchmarkO)
Benchmark_O=rbind(call_PosBenchmarkO,call_NegBenchmarkO)
View(Benchmark_O)
class = elevation <- matrix(0,1401,1)
class = elevation[0:505,1] <- 1
class = elevation[506:1401,0] <- 0
class = elevation
class = elevation = data.frame(class)
class = class
dataset_benchmark=cbind(class, Benchmark_O)
View(dataset_benchmark)
#CTD  Negative
if (interactive()) {
file_neg1 = file.path(path.package("BioSeqClass"), "example", "output_NegBenchMark_O.txt")
tmp_neg = readAAStringSet(file_neg1)
proteinSeq_neg = as.character(tmp_neg)
#CTD1_neg = featureCTD(proteinSeq_neg, class = elements("aminoacid"))
CTD2_neg = featureCTD(proteinSeq_neg, class = aaClass("aaV"))[,-22:-26]
CTD2_neg[is.na(CTD2_neg)] <- 0
}
library(BioSeqClass)
library(Biostrings)
#CTD  Negative
if (interactive()) {
file_neg1 = file.path(path.package("BioSeqClass"), "example", "output_NegBenchMark_O.txt")
tmp_neg = readAAStringSet(file_neg1)
proteinSeq_neg = as.character(tmp_neg)
#CTD1_neg = featureCTD(proteinSeq_neg, class = elements("aminoacid"))
CTD2_neg = featureCTD(proteinSeq_neg, class = aaClass("aaV"))[,-22:-26]
CTD2_neg[is.na(CTD2_neg)] <- 0
}
if (interactive()) {
file_neg1 = file.path(path.package("BioSeqClass"), "example", "output_NegBenchMark_O.fasta")
tmp_neg = readAAStringSet(file_neg1)
proteinSeq_neg = as.character(tmp_neg)
#CTD1_neg = featureCTD(proteinSeq_neg, class = elements("aminoacid"))
CTD2_neg = featureCTD(proteinSeq_neg, class = aaClass("aaV"))[,-22:-26]
CTD2_neg[is.na(CTD2_neg)] <- 0
}
if (interactive()) {
file_neg2 = file.path(path.package("BioSeqClass"), "example", "NegBenchMark_O.pep")
seq1_neg = as.matrix(read.csv(file_neg2, header = F))[,1]
H1_neg = featureHydro(seq1_neg, "kpm")[,-16]
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "NegBenchMark_O.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
data_NegBenchMark_O<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/NegBenchMark_O.csv", header = TRUE, sep=";")
data=cbind(data_NegBenchMark_O,AI_neg,CTD2_neg,H1_neg,PAC4_neg)[,-1]
print(data)
write.csv(data, file = "Neg_BenchMark_O.csv",row.names = TRUE)
call_PosBenchmarkO<-read.csv("D:/BioMedik/PosBenchMark_O/Pos_BenchMark_O.csv", header = TRUE, sep=",")
call_NegBenchmarkO<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/Neg_BenchMark_O.csv", header = TRUE, sep=",")
Benchmark_O=rbind(call_PosBenchmarkO,call_NegBenchmarkO)
class = elevation <- matrix(0,1401,1)
class = elevation[0:505,1] <- 1
class = elevation[506:1401,0] <- 0
class = elevation
class = elevation = data.frame(class)
class = class
dataset_benchmark=cbind(class, Benchmark_O)
write.csv(dataset_benchmark, file = "Benchmark_O.csv",row.names = TRUE)
library(mRMRe)
Benchmark_O<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/BenchMark_O.csv", header = TRUE, sep=",")
#BenchMark_C<-as.numeric(BenchMark_C)
str(BenchMark_C)
#BenchMark_C<-as.numeric(BenchMark_C)
str(BenchMark_O)
Benchmark_O<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/BenchMark_O.csv", header = TRUE, sep=",")
#BenchMark_C<-as.numeric(BenchMark_C)
str(BenchMark_O)
#BenchMark_C<-as.numeric(BenchMark_C)
str(Benchmark_O)
View(dataset_benchmark)
class = elevation <- matrix(0,1401,1)
class = elevation[0:505,1] <- 1
class = elevation[506:1401,0] <- 0
class = elevation
class = elevation = data.frame(class)
class = class
dataset_benchmark=cbind(Benchmark_O, class)
write.csv(dataset_benchmark, file = "Benchmark_O.csv",row.names = TRUE)
Benchmark_O<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/BenchMark_O.csv", header = TRUE, sep=",")
#BenchMark_C<-as.numeric(BenchMark_C)
str(Benchmark_O)
View(Benchmark_O)
call_PosBenchmarkO<-read.csv("D:/BioMedik/PosBenchMark_O/Pos_BenchMark_O.csv", header = TRUE, sep=",")
View(call_PosBenchmarkO)
View(Benchmark_O)
call_NegBenchmarkO<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/Neg_BenchMark_O.csv", header = TRUE, sep=",")
View(call_NegBenchmarkO)
Benchmark_O=rbind(call_PosBenchmarkO,call_NegBenchmarkO)
View(Benchmark_O)
class = elevation <- matrix(0,1401,1)
class = elevation[0:505,1] <- 1
class = elevation[506:1401,0] <- 0
class = elevation
class = elevation = data.frame(class)
class = class
dataset_benchmark=cbind(Benchmark_O, class)
write.csv(dataset_benchmark, file = "Benchmark_O.csv",row.names = TRUE)
View(dataset_benchmark)
library(mRMRe)
Benchmark_O<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/BenchMark_O.csv", header = TRUE, sep=",")
View(Benchmark_O)
#BenchMark_C<-as.numeric(BenchMark_C)
str(Benchmark_O)
BenchMark_O[[3]]<-as.numeric(BenchMark_O[[3]])
BenchMark_O[[4]]<-as.numeric(BenchMark_O[[4]])
BenchMark_O[[5]]<-as.numeric(BenchMark_O[[5]])
BenchMark_O[[6]]<-as.numeric(BenchMark_O[[6]])
BenchMark_O[[7]]<-as.numeric(BenchMark_O[[7]])
BenchMark_O[[8]]<-as.numeric(BenchMark_O[[8]])
BenchMark_O[[9]]<-as.numeric(BenchMark_O[[9]])
BenchMark_O[[10]]<-as.numeric(BenchMark_O[[10]])
BenchMark_O[[11]]<-as.numeric(BenchMark_O[[11]])
BenchMark_O[[12]]<-as.numeric(BenchMark_O[[12]])
BenchMark_O[[13]]<-as.numeric(BenchMark_O[[13]])
BenchMark_O[[14]]<-as.numeric(BenchMark_O[[14]])
BenchMark_O[[15]]<-as.numeric(BenchMark_O[[15]])
BenchMark_O[[16]]<-as.numeric(BenchMark_O[[16]])
BenchMark_O[[17]]<-as.numeric(BenchMark_O[[17]])
BenchMark_O[[33]]<-as.numeric(BenchMark_O[[33]])
BenchMark_O[[43]]<-as.numeric(BenchMark_O[[43]])
BenchMark_O[[48]]<-as.numeric(BenchMark_O[[48]])
BenchMark_O[[53]]<-as.numeric(BenchMark_O[[53]])
Benchmark_O[[3]]<-as.numeric(Benchmark_O[[3]])
Benchmark_O[[4]]<-as.numeric(Benchmark_O[[4]])
Benchmark_O[[5]]<-as.numeric(Benchmark_O[[5]])
Benchmark_O[[6]]<-as.numeric(Benchmark_O[[6]])
Benchmark_O[[7]]<-as.numeric(Benchmark_O[[7]])
Benchmark_O[[8]]<-as.numeric(Benchmark_O[[8]])
Benchmark_O[[9]]<-as.numeric(Benchmark_O[[9]])
Benchmark_O[[10]]<-as.numeric(Benchmark_O[[10]])
Benchmark_O[[11]]<-as.numeric(Benchmark_O[[11]])
Benchmark_O[[12]]<-as.numeric(Benchmark_O[[12]])
Benchmark_O[[13]]<-as.numeric(Benchmark_O[[13]])
Benchmark_O[[14]]<-as.numeric(Benchmark_O[[14]])
Benchmark_O[[15]]<-as.numeric(Benchmark_O[[15]])
Benchmark_O[[16]]<-as.numeric(Benchmark_O[[16]])
Benchmark_O[[17]]<-as.numeric(Benchmark_O[[17]])
Benchmark_O[[33]]<-as.numeric(Benchmark_O[[33]])
Benchmark_O[[43]]<-as.numeric(Benchmark_O[[43]])
Benchmark_O[[48]]<-as.numeric(Benchmark_O[[48]])
Benchmark_O[[53]]<-as.numeric(Benchmark_O[[53]])
#BenchMark_C<-as.numeric(BenchMark_C)
str(Benchmark_O)
colnames(BenchMark_C)
colnames(Benchmark_C)
colnames(Benchmark_O)
Benchmark_O<-mRMR.data(data=data.frame(BenchMark_C[,3:92, drop=FALSE]))
Benchmark_O<-mRMR.data(data=data.frame(Benchmark_O[,3:92, drop=FALSE]))
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=Benchmark_O, target_indices=90,
feature_count = 50)
solutions(MRMR_Test)
Benchmark_O2<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/BenchMark_O.csv", header = TRUE, sep=",")[,-1:-2]
colnames(Benchmark_O2)
datamrmr.se <- dplyr::select(BenchMark_O2,4,49,82,76,88,53,87,73,52,57,64,71,85,66,26,86,59,56,89,63,60,18,25,55,58,77,79,81,29,40,84,80,68,72,37,70,15,74,69,17,16,83,61,44,28,62,24,23,54,19,class)
datamrmr.se <- dplyr::select(Benchmark_O2,4,49,82,76,88,53,87,73,52,57,64,71,85,66,26,86,59,56,89,63,60,18,25,55,58,77,79,81,29,40,84,80,68,72,37,70,15,74,69,17,16,83,61,44,28,62,24,23,54,19,class)
write.csv(datamrmr.se, file = "datamrmr.csv",row.names = TRUE)
View(datamrmr.se)
library(caret)
library(e1071)
call_datamrmr<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/datamrmr.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_Linear_O.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_Linear_O.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_polynomial_O.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accurayO3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_polynomial_O.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_sigmoid_O.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_gausian_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO5)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_Linear_O.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_Linear_O1.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_polynomial_O1.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_sigmoid_O1.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_gausian_C1.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO5)
sink()
}
library(caret)
library(e1071)
Tanpa_BenchMark_O<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/BenchMark_O.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_O$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_O[indeks_data,]
data_test <- Tanpa_BenchMark_O[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO_2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_Linear_O_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO_2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_O$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_O[indeks_data,]
data_test <- Tanpa_BenchMark_O[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO_3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_polynomial_O_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO_3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_O$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_O[indeks_data,]
data_test <- Tanpa_BenchMark_O[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO_4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_sigmoid_O_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO_4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_O$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_O[indeks_data,]
data_test <- Tanpa_BenchMark_O[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO_5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_gausiaO_O_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO_5)
sink()
}
library(mRMRe)
Benchmark_O<-read.csv("D:/BioMedik/NegBenchMark_O/NegBenchMark_O/BenchMark_O.csv", header = TRUE, sep=",")
#BenchMark_C<-as.numeric(BenchMark_C)
str(Benchmark_O)
Benchmark_O[[1]]<-as.numeric(Benchmark_O[[1]])
Benchmark_O[[2]]<-as.numeric(Benchmark_O[[2]])
Benchmark_O[[3]]<-as.numeric(Benchmark_O[[3]])
Benchmark_O[[4]]<-as.numeric(Benchmark_O[[4]])
Benchmark_O[[5]]<-as.numeric(Benchmark_O[[5]])
Benchmark_O[[6]]<-as.numeric(Benchmark_O[[6]])
Benchmark_O[[7]]<-as.numeric(Benchmark_O[[7]])
Benchmark_O[[8]]<-as.numeric(Benchmark_O[[8]])
Benchmark_O[[9]]<-as.numeric(Benchmark_O[[9]])
Benchmark_O[[10]]<-as.numeric(Benchmark_O[[10]])
Benchmark_O[[11]]<-as.numeric(Benchmark_O[[11]])
Benchmark_O[[12]]<-as.numeric(Benchmark_O[[12]])
Benchmark_O[[13]]<-as.numeric(Benchmark_O[[13]])
Benchmark_O[[14]]<-as.numeric(Benchmark_O[[14]])
Benchmark_O[[15]]<-as.numeric(Benchmark_O[[15]])
Benchmark_O[[16]]<-as.numeric(Benchmark_O[[16]])
Benchmark_O[[17]]<-as.numeric(Benchmark_O[[17]])
Benchmark_O[[33]]<-as.numeric(Benchmark_O[[33]])
Benchmark_O[[43]]<-as.numeric(Benchmark_O[[43]])
Benchmark_O[[48]]<-as.numeric(Benchmark_O[[48]])
Benchmark_O[[53]]<-as.numeric(Benchmark_O[[53]])
Benchmark_O[[93]]<-as.numeric(Benchmark_O[[93]])
colnames(Benchmark_O)
Benchmark_O<-mRMR.data(data=data.frame(Benchmark_O[,3:92, drop=FALSE]))
