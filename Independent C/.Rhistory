print(paste('MCC = ',mcc.tst4))
sink()
}
library(mRMRe)
Idpn_C1<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE, sep=",")
str(Idpn_C1)
Idpn_C1[[2]]<-as.numeric(Idpn_C1[[2]])
Idpn_C1[[3]]<-as.numeric(Idpn_C1[[3]])
Idpn_C1[[4]]<-as.numeric(Idpn_C1[[4]])
Idpn_C1[[5]]<-as.numeric(Idpn_C1[[5]])
Idpn_C1[[6]]<-as.numeric(Idpn_C1[[6]])
Idpn_C1[[7]]<-as.numeric(Idpn_C1[[7]])
Idpn_C1[[8]]<-as.numeric(Idpn_C1[[8]])
Idpn_C1[[9]]<-as.numeric(Idpn_C1[[9]])
Idpn_C1[[10]]<-as.numeric(Idpn_C1[[10]])
Idpn_C1[[11]]<-as.numeric(Idpn_C1[[11]])
Idpn_C1[[12]]<-as.numeric(Idpn_C1[[12]])
Idpn_C1[[13]]<-as.numeric(Idpn_C1[[13]])
Idpn_C1[[14]]<-as.numeric(Idpn_C1[[14]])
Idpn_C1[[15]]<-as.numeric(Idpn_C1[[15]])
Idpn_C1[[16]]<-as.numeric(Idpn_C1[[16]])
Idpn_C1[[17]]<-as.numeric(Idpn_C1[[17]])
Idpn_C1[[33]]<-as.numeric(Idpn_C1[[33]])
Idpn_C1[[43]]<-as.numeric(Idpn_C1[[43]])
Idpn_C1[[48]]<-as.numeric(Idpn_C1[[48]])
Idpn_C1[[53]]<-as.numeric(Idpn_C1[[53]])
Idpn_C1[[93]]<-as.numeric(Idpn_C1[[93]])
Idpn_C2<-mRMR.data(data=data.frame(Idpn_C1[,3:92, drop=FALSE]))
---------------------------------------------------------------------------------------
MRMR_Test2<-mRMR.classic("mRMRe.Filter", data=Idpn_C2, target_indices=90,
feature_count = 25)
---------------------------------------------------------------------------------------
MRMR_Test2<-mRMR.classic("mRMRe.Filter", data=Idpn_C2, target_indices=90,
feature_count = 25)
MRMR_Test2<-mRMR.classic("mRMRe.Filter", data=Idpn_C2, target_indices=90,
feature_count = 25)
solutions(MRMR_Test2)
Idpn_C3 <- read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE, sep=",")[,-1:-2]
colnames(Idpn_C3)
datamrmr.se <- dplyr::select(Idpn_C3,78,80,75,7,18,39,70,23,27,68,16,66,88,82,43,9,20,1,76,50,79,65,54,57,72,class)
write.csv(datamrmr.se, file = "datamrmr25.csv",row.names = TRUE)
call_datamrmr25<-read.csv("D:/baru/datamrmr25.csv", header = TRUE, sep=",")[,-1]
call_datamrmr25<-read.csv("D:/IndependentC/datamrmr25.csv", header = TRUE, sep=",")[,-1]
call_datamrmr25<-read.csv("D:/Independent_C/datamrmr25.csv", header = TRUE, sep=",")[,-1]
call_datamrmr25<-read.csv("D:/Independent C/datamrmr25.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy6= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst5 = mccr(hasilakhir, data_test$class)
fileName5='idpn_Linear_C_mrmr25.txt'
sink(fileName5, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy6)
print(paste('MCC = ',mcc.tst5))
sink()
}
library(caret)
library(e1071)
library(mccr)
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy6= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst5 = mccr(hasilakhir, data_test$class)
fileName5='idpn_Linear_C_mrmr25.txt'
sink(fileName5, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy6)
print(paste('MCC = ',mcc.tst5))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy7= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst6 = mccr(hasilakhir, data_test$class)
fileName6='idpn_polynomialC_mrmr50.txt'
sink(fileName6, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy7)
print(paste('MCC = ',mcc.tst6))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy8= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst7 = mccr(hasilakhir, data_test$class)
fileName7='idpn_sigmoid_C_mrmr25.txt'
sink(fileName7, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy8)
print(paste('MCC = ',mcc.tst7))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy9= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst8 = mccr(hasilakhir, data_test$class)
fileName8='idpn_gausian_C_mrmr25.txt'
sink(fileName8, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy9)
print(paste('MCC = ',mcc.tst8))
sink()
}
library(caret)
library(e1071)
library(mccr)
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy3= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst2 = mccr(hasilakhir, data_test$class)
fileName2='idpn_polynomialC_mrmr50.txt'
sink(fileName2, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy3)
print(paste('MCC = ',mcc.tst2))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy7= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst6 = mccr(hasilakhir, data_test$class)
fileName6='idpn_polynomialC_mrmr25.txt'
sink(fileName6, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy7)
print(paste('MCC = ',mcc.tst6))
sink()
}
library(mRMRe)
Idpn_C1<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE, sep=",")
str(Idpn_C1)
Idpn_C1[[2]]<-as.numeric(Idpn_C1[[2]])
Idpn_C1[[3]]<-as.numeric(Idpn_C1[[3]])
Idpn_C1[[4]]<-as.numeric(Idpn_C1[[4]])
Idpn_C1[[5]]<-as.numeric(Idpn_C1[[5]])
Idpn_C1[[6]]<-as.numeric(Idpn_C1[[6]])
Idpn_C1[[7]]<-as.numeric(Idpn_C1[[7]])
Idpn_C1[[8]]<-as.numeric(Idpn_C1[[8]])
Idpn_C1[[9]]<-as.numeric(Idpn_C1[[9]])
Idpn_C1[[10]]<-as.numeric(Idpn_C1[[10]])
Idpn_C1[[11]]<-as.numeric(Idpn_C1[[11]])
Idpn_C1[[12]]<-as.numeric(Idpn_C1[[12]])
Idpn_C1[[13]]<-as.numeric(Idpn_C1[[13]])
Idpn_C1[[14]]<-as.numeric(Idpn_C1[[14]])
Idpn_C1[[15]]<-as.numeric(Idpn_C1[[15]])
Idpn_C1[[16]]<-as.numeric(Idpn_C1[[16]])
Idpn_C1[[17]]<-as.numeric(Idpn_C1[[17]])
Idpn_C1[[33]]<-as.numeric(Idpn_C1[[33]])
Idpn_C1[[43]]<-as.numeric(Idpn_C1[[43]])
Idpn_C1[[48]]<-as.numeric(Idpn_C1[[48]])
Idpn_C1[[53]]<-as.numeric(Idpn_C1[[53]])
Idpn_C1[[93]]<-as.numeric(Idpn_C1[[93]])
Idpn_C2<-mRMR.data(data=data.frame(Idpn_C1[,3:92, drop=FALSE]))
#mrmr 75
MRMR_Test3<-mRMR.classic("mRMRe.Filter", data=Idpn_C2, target_indices=90,
feature_count = 75)
solutions(MRMR_Test3)
Idpn_C3 <- read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE, sep=",")[,-1:-2]
datamrmr.se <- dplyr::select(Idpn_C3,78,80,75,7,18,39,70,23,27,68,16,66,88,82,43,9,20,1,76,50,79,65,54,57,72,48,83,64,17,58,89,77,74,85,22,63,62,52,11,84,86,37,61,6,60,25,56,29,81,33,30,55,53,69,59,8,21,19,28,44,2,40,42,
87,71,26,12,34,4,36,14,24,38,67,73,class)
write.csv(datamrmr.se, file = "datamrmr75.csv",row.names = TRUE)
library(caret)
library(e1071)
library(mccr)
call_datamrmr75<-read.csv("D:/Independent C/datamrmr75.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy10= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst9 = mccr(hasilakhir, data_test$class)
fileName9='idpn_Linear_C_mrmr75.txt'
sink(fileName9, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy10)
print(paste('MCC = ',mcc.tst9))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy11= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst10 = mccr(hasilakhir, data_test$class)
fileName10='idpn_polynomialC_mrmr75.txt'
sink(fileName6, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy11)
print(paste('MCC = ',mcc.tst10))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy12= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst11 = mccr(hasilakhir, data_test$class)
fileName11='idpn_sigmoid_C_mrmr75.txt'
sink(fileName11, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy12)
print(paste('MCC = ',mcc.tst11))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy13= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst12 = mccr(hasilakhir, data_test$class)
fileName12='idpn_gausian_C_mrmr75.txt'
sink(fileName12, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy13)
print(paste('MCC = ',mcc.tst12))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy11= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst10 = mccr(hasilakhir, data_test$class)
fileName10='idpn_polynomialC_mrmr75.txt'
sink(fileName6, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy11)
print(paste('MCC = ',mcc.tst10))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy11= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst10 = mccr(hasilakhir, data_test$class)
fileName10='idpn_polynomialC_mrmr75.txt'
sink(fileName10, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy11)
print(paste('MCC = ',mcc.tst10))
sink()
}
C_Independent<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy14= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst13 = mccr(hasilakhir, data_test$class)
fileName13='idpn_Linear_C.txt'
sink(fileName13, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy14)
print(paste('MCC = ',mcc.tst13))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy15= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst14 = mccr(hasilakhir, data_test$class)
fileName14='idpn_polynomialC.txt'
sink(fileName14, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy15)
print(paste('MCC = ',mcc.tst14))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy16= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst15 = mccr(hasilakhir, data_test$class)
fileName15='idpn_sigmoid_C.txt'
sink(fileName15, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy16)
print(paste('MCC = ',mcc.tst15))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy17= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst16 = mccr(hasilakhir, data_test$class)
fileName16='idpn_gausian_C.txt'
sink(fileName16, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy17)
print(paste('MCC = ',mcc.tst16))
sink()
}
library(caret)
library(e1071)
library(mccr)
C_Independent<-read.csv("D:/BioMedik/glikosilasi/Independent_C.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=C_Independent$class, p=0.4, list=FALSE)
data_train <- C_Independent[indeks_data,]
data_test <- C_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy14= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst13 = mccr(hasilakhir, data_test$class)
fileName13='idpn_Linear_C.txt'
sink(fileName13, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy14)
print(paste('MCC = ',mcc.tst13))
sink()
}
library(mRMRe)
Idpn_C2<-mRMR.data(data=data.frame(Idpn_C1[,3:92, drop=FALSE]))
MRMR_Test2<-mRMR.classic("mRMRe.Filter", data=Idpn_C2, target_indices=90,
feature_count = 25)
solutions(MRMR_Test2)
