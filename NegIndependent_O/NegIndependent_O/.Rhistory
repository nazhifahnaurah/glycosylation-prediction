accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE, times = 1)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpN_Linear-1.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE, times = 1)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpO_Linear-1.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
sink()
}
#install.packages("caret")
install.packages("mccr")
library(mccr)
mcc_value=mccr(hasilakhir, data_test$class)
O_Independent<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE,sep=",")
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE, times = 1)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
mcc_value=mccr(hasilakhir, data_test$class)
fileName='idpO_Linear-1.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
print()
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE, times = 1)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
mcc_value=mccr(hasilakhir, data_test$class)
fileName='idpO_Linear-1.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
print(mcc_value)
sink()
}
library(BioSeqClass)
library(Biostrings)
#CTD  Negative
if (interactive()) {
file_neg1 = file.path(path.package("BioSeqClass"), "example", "output_NegIndependent_O.fasta")
tmp_neg = readAAStringSet(file_neg1)
proteinSeq_neg = as.character(tmp_neg)
#CTD1_neg = featureCTD(proteinSeq_neg, class = elements("aminoacid"))
CTD2_neg = featureCTD(proteinSeq_neg, class = aaClass("aaV"))[,-22:-26]
CTD2_neg[is.na(CTD2_neg)] <- 0
}
if (interactive()) {
file_neg2 = file.path(path.package("BioSeqClass"), "example", "NegIndependent_O.pep")
seq1_neg = as.matrix(read.csv(file_neg2, header = F))[,1]
H1_neg = featureHydro(seq1_neg, "kpm")[,-16]
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "NegIndependent_O.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "NegIndependent_O.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "NegIndependent_N.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "NegIndependent_O.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
#AAindex
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "NegIndependent_O.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101") [,-16]
}
#CTD  Negative
if (interactive()) {
file_neg1 = file.path(path.package("BioSeqClass"), "example", "output_NegIndependent_O.fasta")
tmp_neg = readAAStringSet(file_neg1)
proteinSeq_neg = as.character(tmp_neg)
#CTD1_neg = featureCTD(proteinSeq_neg, class = elements("aminoacid"))
CTD2_neg = featureCTD(proteinSeq_neg, class = aaClass("aaV"))[,-22:-26]
CTD2_neg[is.na(CTD2_neg)] <- 0
}
if (interactive()) {
file_neg2 = file.path(path.package("BioSeqClass"), "example", "NegIndependent_O.pep")
seq1_neg = as.matrix(read.csv(file_neg2, header = F))[,1]
H1_neg = featureHydro(seq1_neg, "kpm")[,-16]
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "NegIndependent_O.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
data_NegIn_O<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/NegIndependent_O.csv", header = TRUE, sep=";")
data=cbind(data_NegIn_N,AI_neg,CTD2_neg,H1_neg,PAC4_neg)[,-1]
data=cbind(data_NegIn_O,AI_neg,CTD2_neg,H1_neg,PAC4_neg)[,-1]
print(data)
write.csv(data, file = "Neg_Independent_O.csv",row.names = TRUE)
call_PosIndependentO<-read.csv("D:/BioMedik/PosIndependent_O/Pos_Independent_O.csv", header = TRUE, sep=",")
call_NegIndependentO<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Neg_Independent_O.csv", header = TRUE, sep=",")
Independent_O=rbind(call_PosIndependentO,call_NegIndependentO)[-283,]
Independent_O=rbind(call_PosIndependentO,call_NegIndependentO)
call_PosIndependentO<-read.csv("D:/BioMedik/PosIndependent_O/Pos_Independent_O.csv", header = TRUE, sep=",")
call_PosIndependentO<-read.csv("D:/BioMedik/PosIndependent_O/Pos_Independent_O.csv", header = TRUE, sep=",")
call_NegIndependentO<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Neg_Independent_O.csv", header = TRUE, sep=",")
Independent_O=rbind(call_PosIndependentO,call_NegIndependentO)
write.csv(Independent_O, file = "Independent_O.csv", row.names = FALSE)
class = elevation <- matrix(0,340,1)
class = elevation[0:123,1] <- 1
class = elevation[124:340,0] <- 0
class = elevation
class = elevation = data.frame(class)
class = class
dataset_Independent=cbind(Independent_O,class)
View(dataset_Independent)
write.csv(dataset_Independent, file = "Independent_O.csv",row.names = FALSE)
library(caret)
library(e1071)
O_Independent<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE,sep=",")
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE, times = 1)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
mcc_value=mccr(hasilakhir, data_test$class)
fileName='idpn_Linear_N.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
print(mcc_value)
sink()
}
library(mccr)
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE, times = 1)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
mcc_value=mccr(hasilakhir, data_test$class)
fileName='idpn_Linear_N.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
print(mcc_value)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='Idpn_polynomial_O.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='Idpn_sigmoid_O.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='Idpn_gausian_O.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy5)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='Idpn_gausian_O.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy5)
sink()
}
library(mRMRe)
Idpn_O1<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE, sep=",")
#BenchMark_N1<-as.numeric(BenchMark_N1)
str(Idpn_O1)
Idpn_O1[[3]]<-as.numeric(Idpn_O1[[3]])
Idpn_O1[[4]]<-as.numeric(Idpn_O1[[4]])
Idpn_O1[[5]]<-as.numeric(Idpn_O1[[5]])
Idpn_O1[[6]]<-as.numeric(Idpn_O1[[6]])
Idpn_O1[[7]]<-as.numeric(Idpn_O1[[7]])
Idpn_O1[[8]]<-as.numeric(Idpn_O1[[8]])
Idpn_O1[[9]]<-as.numeric(Idpn_O1[[9]])
Idpn_O1[[10]]<-as.numeric(Idpn_O1[[10]])
Idpn_O1[[11]]<-as.numeric(Idpn_O1[[11]])
Idpn_O1[[12]]<-as.numeric(Idpn_O1[[12]])
Idpn_O1[[13]]<-as.numeric(Idpn_O1[[13]])
Idpn_O1[[14]]<-as.numeric(Idpn_O1[[14]])
Idpn_O1[[15]]<-as.numeric(Idpn_O1[[15]])
Idpn_O1[[16]]<-as.numeric(Idpn_O1[[16]])
Idpn_O1[[17]]<-as.numeric(Idpn_O1[[17]])
Idpn_O1[[33]]<-as.numeric(Idpn_O1[[33]])
Idpn_O1[[43]]<-as.numeric(Idpn_O1[[43]])
Idpn_O1[[48]]<-as.numeric(Idpn_O1[[48]])
Idpn_O1[[53]]<-as.numeric(Idpn_O1[[53]])
Idpn_O2<-mRMR.data(data=data.frame(Idpn_O1[,3:92, drop=FALSE]))
#BenchMark_N1<-as.numeric(BenchMark_N1)
str(Idpn_O1)
Idpn_O1[[1]]<-as.numeric(Idpn_O1[[1]])
Idpn_O1[[2]]<-as.numeric(Idpn_O1[[2]])
Idpn_O1[[3]]<-as.numeric(Idpn_O1[[3]])
Idpn_O1[[4]]<-as.numeric(Idpn_O1[[4]])
Idpn_O1[[5]]<-as.numeric(Idpn_O1[[5]])
Idpn_O1[[6]]<-as.numeric(Idpn_O1[[6]])
Idpn_O1[[7]]<-as.numeric(Idpn_O1[[7]])
Idpn_O1[[8]]<-as.numeric(Idpn_O1[[8]])
Idpn_O1[[9]]<-as.numeric(Idpn_O1[[9]])
Idpn_O1[[10]]<-as.numeric(Idpn_O1[[10]])
Idpn_O1[[11]]<-as.numeric(Idpn_O1[[11]])
Idpn_O1[[12]]<-as.numeric(Idpn_O1[[12]])
Idpn_O1[[13]]<-as.numeric(Idpn_O1[[13]])
Idpn_O1[[14]]<-as.numeric(Idpn_O1[[14]])
Idpn_O1[[15]]<-as.numeric(Idpn_O1[[15]])
Idpn_O1[[16]]<-as.numeric(Idpn_O1[[16]])
Idpn_O1[[17]]<-as.numeric(Idpn_O1[[17]])
Idpn_O1[[33]]<-as.numeric(Idpn_O1[[33]])
Idpn_O1[[43]]<-as.numeric(Idpn_O1[[43]])
Idpn_O1[[48]]<-as.numeric(Idpn_O1[[48]])
Idpn_O1[[53]]<-as.numeric(Idpn_O1[[53]])
Idpn_O1[[93]]<-as.numeric(Idpn_O1[[93]])
Idpn_O1<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE, sep=",")
Idpn_O1<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE, sep=",")
View(Idpn_O1)
Idpn_O2<-mRMR.data(data=data.frame(Idpn_O1[,3:92, drop=FALSE]))
#BenchMark_N1<-as.numeric(BenchMark_N1)
str(Idpn_O1)
Idpn_O1[[1]]<-as.numeric(Idpn_O1[[1]])
Idpn_O1[[2]]<-as.numeric(Idpn_O1[[2]])
Idpn_O1[[3]]<-as.numeric(Idpn_O1[[3]])
Idpn_O1[[4]]<-as.numeric(Idpn_O1[[4]])
Idpn_O1[[5]]<-as.numeric(Idpn_O1[[5]])
Idpn_O1[[6]]<-as.numeric(Idpn_O1[[6]])
Idpn_O1[[7]]<-as.numeric(Idpn_O1[[7]])
Idpn_O1[[8]]<-as.numeric(Idpn_O1[[8]])
Idpn_O1[[9]]<-as.numeric(Idpn_O1[[9]])
Idpn_O1[[10]]<-as.numeric(Idpn_O1[[10]])
Idpn_O1[[11]]<-as.numeric(Idpn_O1[[11]])
Idpn_O1[[12]]<-as.numeric(Idpn_O1[[12]])
Idpn_O1[[13]]<-as.numeric(Idpn_O1[[13]])
Idpn_O1[[14]]<-as.numeric(Idpn_O1[[14]])
Idpn_O1[[15]]<-as.numeric(Idpn_O1[[15]])
Idpn_O1[[16]]<-as.numeric(Idpn_O1[[16]])
Idpn_O1[[17]]<-as.numeric(Idpn_O1[[17]])
Idpn_O1[[33]]<-as.numeric(Idpn_O1[[33]])
Idpn_O1[[43]]<-as.numeric(Idpn_O1[[43]])
Idpn_O1[[48]]<-as.numeric(Idpn_O1[[48]])
Idpn_O1[[53]]<-as.numeric(Idpn_O1[[53]])
Idpn_O1[[93]]<-as.numeric(Idpn_O1[[93]])
Idpn_O1[[93]]<-as.numeric(Idpn_O1[[93]])
Idpn_O1<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE, sep=",")
View(Idpn_O1)
View(dataset_Independent)
Idpn_O1<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE, sep=",")
#BenchMark_N1<-as.numeric(BenchMark_N1)
column(Idpn_O1)
#BenchMark_N1<-as.numeric(BenchMark_N1)
colum(Idpn_O1)
#BenchMark_N1<-as.numeric(BenchMark_N1)
colnames(Idpn_O1)
str(Idpn_O1)
Idpn_O1[[2]]<-as.numeric(Idpn_O1[[2]])
Idpn_O1[[3]]<-as.numeric(Idpn_O1[[3]])
Idpn_O1[[4]]<-as.numeric(Idpn_O1[[4]])
Idpn_O1[[5]]<-as.numeric(Idpn_O1[[5]])
Idpn_O1[[6]]<-as.numeric(Idpn_O1[[6]])
Idpn_O1[[7]]<-as.numeric(Idpn_O1[[7]])
Idpn_O1[[8]]<-as.numeric(Idpn_O1[[8]])
Idpn_O1[[9]]<-as.numeric(Idpn_O1[[9]])
Idpn_O1[[10]]<-as.numeric(Idpn_O1[[10]])
Idpn_O1[[11]]<-as.numeric(Idpn_O1[[11]])
Idpn_O1[[12]]<-as.numeric(Idpn_O1[[12]])
Idpn_O1[[13]]<-as.numeric(Idpn_O1[[13]])
Idpn_O1[[14]]<-as.numeric(Idpn_O1[[14]])
Idpn_O1[[15]]<-as.numeric(Idpn_O1[[15]])
Idpn_O1[[16]]<-as.numeric(Idpn_O1[[16]])
Idpn_O1[[17]]<-as.numeric(Idpn_O1[[17]])
Idpn_O1[[32]]<-as.numeric(Idpn_O1[[32]])
Idpn_O1[[42]]<-as.numeric(Idpn_O1[[42]])
Idpn_O1[[47]]<-as.numeric(Idpn_O1[[47]])
Idpn_O1[[54]]<-as.numeric(Idpn_O1[[54]])
str(Idpn_O1)
#BenchMark_N1<-as.numeric(BenchMark_N1)
colnames(Idpn_O1)
Idpn_O1[[52]]<-as.numeric(Idpn_O1[[52]])
str(Idpn_O1)
Idpn_O2<-mRMR.data(data=data.frame(Idpn_O1[,3:91, drop=FALSE]))
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=Idpn_N2, target_indices=89,
feature_count = 50)
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=Idpn_O2, target_indices=89,
feature_count = 50)
solutions(MRMR_Test)
datamrmr.se <- dplyr::select(Idpn_N2,14,66,76,81,29,88,67,59,22,42,57,27,28,18,7,26,52,20,74,61,70,82,72,23,86,84,60,51,65,75,53,19,73,47,79,1,69,21,39,80,83,71,85,11,63,54,24,78,87,58,class)
Idpn_O2 <- read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Independent_N.csv", header = TRUE, sep=",")[,-1:-2]
colnames(Idpn_O2)
Idpn_O2 <- read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE, sep=",")[,-1:-2]
colnames(Idpn_O2)
datamrmr.se <- dplyr::select(Idpn_O2,14,66,76,81,29,88,67,59,22,42,57,27,28,18,7,26,52,20,74,61,70,82,72,23,86,84,60,51,65,75,53,19,73,47,79,1,69,21,39,80,83,71,85,11,63,54,24,78,87,58,class)
write.csv(datamrmr.se, file = "datamrmr.csv",row.names = TRUE)
library(caret)
library(e1071)
call_datamrmr<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/datamrmr.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_Linear_O_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_polynomial_O_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_sigmoid_O_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyO5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_gausian_O_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyO5)
sink()
}
