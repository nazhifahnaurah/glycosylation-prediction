type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_sigmoid_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
sink()
}
library(caret)
library(e1071)
#install.packages("caret")
call_datamrmr<-read.csv("D:/BioMedik/NegBenchMark_C/datamrmr.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_Linear_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_polynomial_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_sigmoid_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="gaussian")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_gaussian_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC5)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="gausian")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_gausian_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC5)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial basis")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_gausian_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC5)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_gausian_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC5)
sink()
}
View(Data_BenchMark_C2)
Data_BenchMark_C2 <- subset( BenchMark_C2, select = -c(1, 92 ) )
View(Data_BenchMark_C2)
colnames(Data_BenchMark_C2)
datamrmr.se <- dplyr::select(Data_BenchMark_C2,76,81,80,8,89,73,33,87,5,22,10,57,26,62,31,66,88,63,14,86,79,55,29,85,42,64,83,9,21,68,16,72,56,45,60,61,40,3,53,36,38,70,59,7,25,75,65,58,11,71,class)
BenchMark_C2<-read.csv("D:/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE, sep=",")[,-1]
View(BenchMark_C2)
BenchMark_C2<-read.csv("D:/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE, sep=",")[,-1:-2]
View(BenchMark_C2)
#Data_BenchMark_C2 <- subset( BenchMark_C2, select = -c(1, 32 ) )
colnames(BenchMark_C2)
datamrmr.se <- dplyr::select(Data_BenchMark_C2,76,81,80,8,89,73,33,87,5,22,10,57,26,62,31,66,88,63,14,86,79,55,29,85,42,64,83,9,21,68,16,72,56,45,60,61,40,3,53,36,38,70,59,7,25,75,65,58,11,71,class)
datamrmr.se <- dplyr::select(BenchMark_C2,76,81,80,8,89,73,33,87,5,22,10,57,26,62,31,66,88,63,14,86,79,55,29,85,42,64,83,9,21,68,16,72,56,45,60,61,40,3,53,36,38,70,59,7,25,75,65,58,11,71,class)
write.csv(datamrmr.se, file = "datamrmr.csv",row.names = TRUE)
library(caret)
library(e1071)
call_datamrmr<-read.csv("D:/BioMedik/NegBenchMark_C/datamrmr.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_Linear_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_polynomial_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_sigmoid_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_gausian_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC5)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_gausian_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC5)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_sigmoid_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_polynomial_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_Linear_C.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC2)
sink()
}
View(call_PosBenchMarkC)
View(dataset_BenchMark)
library(caret)
library(e1071)
Tanpa_Tanpa_BenchMark_C<-read.csv("D:/BioMedik/NegTanpa_BenchMark_C/BenchMark_C.csv", header = TRUE,sep=",")[,-1]
Tanpa_Tanpa_BenchMark_C<-read.csv("D:/BioMedik/Neg_BenchMark_C/BenchMark_C.csv", header = TRUE,sep=",")[,-1]
Tanpa_Tanpa_BenchMark_C<-read.csv("D:/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_Tanpa_BenchMark_C$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_C[indeks_data,]
data_test <- Tanpa_BenchMark_C[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC_2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_Linear_C_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC_2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_C$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_C[indeks_data,]
data_test <- Tanpa_BenchMark_C[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC_2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_Linear_C_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC_2)
sink()
}
Tanpa_BenchMark_C<-read.csv("D:/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_C$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_C[indeks_data,]
data_test <- Tanpa_BenchMark_C[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC_2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_Linear_C_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC_2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_C$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_C[indeks_data,]
data_test <- Tanpa_BenchMark_C[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC_3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_polynomial_C_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC_3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_C$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_C[indeks_data,]
data_test <- Tanpa_BenchMark_C[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC_4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_sigmoid_C_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC_4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=Tanpa_BenchMark_C$class, p=0.4, list=FALSE)
data_train <- Tanpa_BenchMark_C[indeks_data,]
data_test <- Tanpa_BenchMark_C[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC_5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='benchmark_gausian_C_tanpamrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC_5)
sink()
}
View(call_NegBenchMarkC)
View(BenchMark_C)
x<-("D:/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE, sep=",")
x<-read.csv("D:/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE, sep=",")
x<-read.csv("D:/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE, sep=",")
all<-read.csv("D:/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE, sep=",")
all<-read.csv("D:sems_skripsi/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE, sep=",")
all<-read.csv("D:semsskripsi/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE, sep=",")
all<-read.csv("D:sems skripsi/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE, sep=",")
all<-read.csv("D:/skripsi/BioMedik/NegBenchMark_C/BenchMark_C.csv", header = TRUE, sep=",")
View(all)
View(dataset_BenchMark)
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "negC.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101") [,-16]
}
library(BioSeqClass)
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "negC.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101") [,-16]
}
#AAindex_neg
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "neg.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101") [,-16]
}
View(AI_neg)
#AAindex_neg
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "Neg.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101")
}
library(BioSeqClass)
#AAindex_neg
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "Neg.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101")
}
View(AI_neg)
#AAindex_neg
if (interactive()) {
file = file.path(path.package("BioSeqClass"), "example", "neg.pep")
seq  = as.matrix(read.csv(file, header = F)) [,1]
AI_neg = featureAAindex(seq, "ANDN920101")
}
