View(call_NegIndependentN)
View(call_PosIndependentN)
Independent_N=rbind(call_PosIndependentN,call_NegIndependentN)
View(Independent_N)
class = elevation <- matrix(0,224,1)
class = elevation[0:82,1] <- 1
class = elevation[83:224,0] <- 0
class = elevation
class = elevation = data.frame(class)
class = class
dataset_Independent=cbind(class, Independent_N)
View(dataset_Independent)
class = elevation <- matrix(0,224,1)
class = elevation[0:82,1] <- 1
class = elevation[83:224,0] <- 0
class = elevation
class = elevation = data.frame(class)
class = class
dataset_Independent=cbind(Independent_N,class)
View(dataset_Independent)
write.csv(dataset_benchmark, file = "Independent_N.csv",row.names = TRUE)
write.csv(dataset_Independent, file = "Independent_N.csv",row.names = TRUE)
N_Independent<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Independent_N.csv", header = TRUE, sep=",", row.names = TRUE)
N_Independent<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Independent_N.csv", header = TRUE, sep=",")
View(N_Independent)
N_Independent<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Independent_N.csv", header = TRUE,  row.names = TRUE, sep=",")
N_Independent<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Independent_N.csv", header = TRUE,sep=",")[,-1]
Library(caret)
library(caret)
install.package("caret")
install.packages("caret")
k-fold=5
for (i in 1:5) {
indeks_data<-createDataPartion(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
}
k-fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
}
library(caret)
k-fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
}
-----------------------------------------------------------------------------------------------------------
library(e1071)
k-fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
}
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
}
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(hasilakhir, data_test$class)
}
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(predict = hasilakhir, reference = data_test$class)
}
library(caret)
library(e1071)
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(predict = hasilakhir, reference = data_test$class)
}
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
data_train$class <- as.factor(data_train$class)
data_test$class <- as.factor(data_test$class)
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(predict = hasilakhir, reference = data_test$class)
}
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(predict = hasilakhir, reference = data_test$class)
}
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpN_Linear-1.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
sink()
}
library(caret)
library(e1071)
#install.packages("caret")
N_Independent<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Independent_N.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))}
library(BioSeqClass)
library(Biostrings)
#CTD  Negative
if (interactive()) {
file_neg1 = file.path(path.package("BioSeqClass"), "example", "output_NegIndependent_N.fasta")
tmp_neg = readAAStringSet(file_neg1)
proteinSeq_neg = as.character(tmp_neg)
#CTD1_neg = featureCTD(proteinSeq_neg, class = elements("aminoacid"))
CTD2_neg = featureCTD(proteinSeq_neg, class = aaClass("aaV"))[,-22:-26]
CTD2_neg[is.na(CTD2_neg)] <- 0
}
if (interactive()) {
file_neg2 = file.path(path.package("BioSeqClass"), "example", "NegIndependent_N.pep")
seq1_neg = as.matrix(read.csv(file_neg2, header = F))[,1]
H1_neg = featureHydro(seq1_neg, "kpm")[,-16]
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "NegIndependent_N.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
View(CTD2_neg)
data_NegIn_N<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/NegIndependent_N.csv", header = TRUE, sep=";")
data=cbind(data_NegBenchMark_C,AI_neg,CTD2_neg,H1_neg,PAC4_neg)[,-1]
data=cbind(data_NegIn_N,AI_neg,CTD2_neg,H1_neg,PAC4_neg)[,-1]
print(data)
write.csv(data, file = "Neg_Independent_N.csv",row.names = TRUE)
call_PosIndependentN<-read.csv("D:/BioMedik/PosIndependent_N/Pos_Independent_N.csv", header = TRUE, sep=",")
call_NegIndependentN<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Neg_Independent_N.csv", header = TRUE, sep=",")
Independent_N=rbind(call_PosIndependentN,call_NegIndependentN)
call_PosIndependentN<-read.csv("D:/BioMedik/PosIndependent_N/Pos_PosIndependent_N.csv", header = TRUE, sep=",")
call_NegIndependentN<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Neg_Independent_N.csv", header = TRUE, sep=",")
Independent_N=rbind(call_PosIndependentN,call_NegIndependentN)
View(Independent_N)
View(N_Independent)
View(dataset_Independent)
class = elevation <- matrix(0,224,1)
class = elevation[0:82,1] <- 1
class = elevation[83:224,0] <- 0
class = elevation
class = elevation = data.frame(class)
class = class
dataset_Independent=cbind(Independent_N,class)
View(dataset_Independent)
write.csv(dataset_Independent, file = "Independent_N.csv",row.names = TRUE)
library(caret)
library(e1071)
N_Independent<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Independent_N.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpN_Linear_N.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
sink()
}
View(N_Independent)
View(N_Independent)
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyN3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='Idpn_polynomial_N.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyN3)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyN4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='Idpn_sigmoid_N.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyN4)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=N_Independent$class, p=0.4, list=FALSE)
data_train <- N_Independent[indeks_data,]
data_test <- N_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyN5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='Idpn_gausian_N.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyN5)
sink()
}
library(mRMRe)
Idpn_N1<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Independent_N.csv", header = TRUE, sep=",")
#BenchMark_N1<-as.numeric(BenchMark_N1)
str(Idpn_N1)
Idpn_N1[[3]]<-as.numeric(Idpn_N1[[3]])
Idpn_N1[[4]]<-as.numeric(Idpn_N1[[4]])
Idpn_N1[[5]]<-as.numeric(Idpn_N1[[5]])
Idpn_N1[[6]]<-as.numeric(Idpn_N1[[6]])
Idpn_N1[[7]]<-as.numeric(Idpn_N1[[7]])
Idpn_N1[[8]]<-as.numeric(Idpn_N1[[8]])
Idpn_N1[[9]]<-as.numeric(IIdpn_N1)
Idpn_N1[[10]]<-as.numeric(Idpn_N1[[10]])
Idpn_N1[[11]]<-as.numeric(Idpn_N1[[11]])
Idpn_N1[[12]]<-as.numeric(Idpn_N1[[12]])
Idpn_N1[[13]]<-as.numeric(Idpn_N1[[13]])
Idpn_N1[[14]]<-as.numeric(Idpn_N1[[14]])
Idpn_N1[[15]]<-as.numeric(Idpn_N1[[15]])
Idpn_N1[[16]]<-as.numeric(Idpn_N1[[16]])
Idpn_N1[[17]]<-as.numeric(Idpn_N1[[17]])
Idpn_N1[[3]]<-as.numeric(Idpn_N1[[3]])
Idpn_N1[[4]]<-as.numeric(Idpn_N1[[4]])
Idpn_N1[[5]]<-as.numeric(Idpn_N1[[5]])
Idpn_N1[[6]]<-as.numeric(Idpn_N1[[6]])
Idpn_N1[[7]]<-as.numeric(Idpn_N1[[7]])
Idpn_N1[[8]]<-as.numeric(Idpn_N1[[8]])
Idpn_N1[[9]]<-as.numeric(Idpn_N1)[[9]]
Idpn_N1[[10]]<-as.numeric(Idpn_N1[[10]])
Idpn_N1[[11]]<-as.numeric(Idpn_N1[[11]])
Idpn_N1[[12]]<-as.numeric(Idpn_N1[[12]])
Idpn_N1[[13]]<-as.numeric(Idpn_N1[[13]])
Idpn_N1[[14]]<-as.numeric(Idpn_N1[[14]])
Idpn_N1[[15]]<-as.numeric(Idpn_N1[[15]])
Idpn_N1[[16]]<-as.numeric(Idpn_N1[[16]])
Idpn_N1[[17]]<-as.numeric(Idpn_N1[[17]])
Idpn_N1[[33]]<-as.numeric(Idpn_N1[[33]])
Idpn_N1[[43]]<-as.numeric(Idpn_N1[[43]])
Idpn_N1[[48]]<-as.numeric(Idpn_N1[[48]])
Idpn_N1[[53]]<-as.numeric(Idpn_N1[[53]])
#BenchMark_N1<-as.numeric(BenchMark_N1)
str(Idpn_N1)
Idpn_N2<-mRMR.data(data=data.frame(Idpn_N1[,3:92, drop=FALSE]))
Idpn_N1<-mRMR.data(data=data.frame(Idpn_N1[,3:92, drop=FALSE]))
Idpn_N1[[3]]<-as.numeric(Idpn_N1[[3]])
Idpn_N1[[4]]<-as.numeric(Idpn_N1[[4]])
Idpn_N1[[5]]<-as.numeric(Idpn_N1[[5]])
Idpn_N1[[6]]<-as.numeric(Idpn_N1[[6]])
Idpn_N1[[7]]<-as.numeric(Idpn_N1[[7]])
Idpn_N1[[8]]<-as.numeric(Idpn_N1[[8]])
Idpn_N1[[9]]<-as.numeric(Idpn_N1)[[9]]
Idpn_N1[[10]]<-as.numeric(Idpn_N1[[10]])
Idpn_N1[[11]]<-as.numeric(Idpn_N1[[11]])
Idpn_N1[[12]]<-as.numeric(Idpn_N1[[12]])
Idpn_N1[[13]]<-as.numeric(Idpn_N1[[13]])
Idpn_N1[[14]]<-as.numeric(Idpn_N1[[14]])
Idpn_N1[[15]]<-as.numeric(Idpn_N1[[15]])
Idpn_N1[[16]]<-as.numeric(Idpn_N1[[16]])
Idpn_N1[[17]]<-as.numeric(Idpn_N1[[17]])
Idpn_N1[[33]]<-as.numeric(Idpn_N1[[33]])
Idpn_N1[[43]]<-as.numeric(Idpn_N1[[43]])
Idpn_N1[[48]]<-as.numeric(Idpn_N1[[48]])
Idpn_N1[[53]]<-as.numeric(Idpn_N1[[53]])
#BenchMark_N1<-as.numeric(BenchMark_N1)
str(Idpn_N1)
Idpn_N1[[9]]<-as.numeric(Idpn_N1)[[9]]
Idpn_N1[[9]]<-as.numeric(Idpn_N1[[9]])
Idpn_N2<-mRMR.data(data=data.frame(Idpn_N1[,3:92, drop=FALSE]))
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=Idpn_N2, target_indices=90,
feature_count = 50)
solutions(MRMR_Test)
Idpn_N2 <- read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/Independent_N.csv", header = TRUE, sep=",")[,-1:-2]
colnames(Idpn_N2)
datamrmr.se <- dplyr::select(Idpn_N2,87,84,60,80,71,88,85,28,82,56,16,6,55,81,77,23,65,76,34,54,53,25,62,73,58,45,66,89,2,15,70,42,79,57,67,9,69,75,49,27,78,86,72,24,39,26,52,22,4,12,class)
write.csv(datamrmr.se, file = "datamrmr.csv",row.names = TRUE)
View(datamrmr.se)
library(caret)
library(e1071)
call_datamrmr<-read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_N/datamrmr.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_Linear_N_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC3=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_polynomial_N_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC3)
sink()
}
-------------------------------------------------------------------------------------------
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_sigmoid_N_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC4)
sink()
}
View(datamrmr.se)
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC5=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_gausian_N_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC5)
sink()
}
if(interactive()){
file_neg3 = file.path(path.package("BioSeqClass"), "example", "NegIndependent_N.pep")
seq2_neg = as.matrix(read.csv(file_neg3,header=F, sep = ""))
PAC4_neg = featurePseudoAAComp(seq2_neg,4)
}
View(accuracyC4)
View(Idpn_N1)
colnames(Idpn_N2)
#BenchMark_N1<-as.numeric(BenchMark_N1)
colnames(Idpn_N1)
library(caret)
library(e1071)
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracyC4=confusionMatrix(table(predict = hasilakhir, Actual = data_test$class))
fileName='idpn_sigmoid_N_mrmr.txt'
sink(fileName, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracyC4)
sink()
}
