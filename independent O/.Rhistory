library(mRMRe)
Idpn_O1<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE, sep=",")
colnames(Idpn_O1)
str(Idpn_O1)
Idpn_O1[[2]]<-as.numeric(Idpn_O1[[2]])
Idpn_O1[[3]]<-as.numeric(Idpn_O1[[3]])
Idpn_O1[[4]]<-as.numeric(Idpn_O1[[4]])
Idpn_O1[[5]]<-as.numeric(Idpn_O1[[5]])
Idpn_O1[[6]]<-as.numeric(Idpn_O1[[6]])
Idpn_O1[[7]]<-as.numeric(Idpn_O1[[7]])
Idpn_O1[[8]]<-as.numeric(Idpn_O1[[8]])
Idpn_O1[[9]]<-as.numeric(Idpn_O1[[9]])
Idpn_O1[[10]]<-as.numeric(Idpn_O1[[10]])
Idpn_O1[[11]]<-as.numeric(Idpn_O1[[11]])
Idpn_O1[[12]]<-as.numeric(Idpn_O1[[12]])
Idpn_O1[[13]]<-as.numeric(Idpn_O1[[13]])
Idpn_O1[[14]]<-as.numeric(Idpn_O1[[14]])
Idpn_O1[[15]]<-as.numeric(Idpn_O1[[15]])
Idpn_O1[[16]]<-as.numeric(Idpn_O1[[16]])
Idpn_O1[[17]]<-as.numeric(Idpn_O1[[17]])
Idpn_O1[[33]]<-as.numeric(Idpn_O1[[33]])
Idpn_O1[[43]]<-as.numeric(Idpn_O1[[43]])
Idpn_O1[[48]]<-as.numeric(Idpn_O1[[48]])
Idpn_O1[[53]]<-as.numeric(Idpn_O1[[53]])
Idpn_O1[[93]]<-as.numeric(Idpn_O1[[93]])
str(Idpn_O1)
Idpn_O1[[10]]<-as.numeric(Idpn_O1[[10]])
Idpn_O1[[11]]<-as.numeric(Idpn_O1[[11]])
Idpn_O1[[12]]<-as.numeric(Idpn_O1[[12]])
Idpn_O1[[13]]<-as.numeric(Idpn_O1[[13]])
Idpn_O1[[14]]<-as.numeric(Idpn_O1[[14]])
Idpn_O1[[15]]<-as.numeric(Idpn_O1[[15]])
Idpn_O1[[16]]<-as.numeric(Idpn_O1[[16]])
Idpn_O1[[32]]<-as.numeric(Idpn_O1[[32]])
Idpn_O1[[42]]<-as.numeric(Idpn_O1[[42]])
Idpn_O1[[47]]<-as.numeric(Idpn_O1[[47]])
Idpn_O1[[52]]<-as.numeric(Idpn_O1[[52]])
Idpn_O1[[92]]<-as.numeric(Idpn_O1[[92]])
str(Idpn_O1)
Idpn_O2<-mRMR.data(data=data.frame(Idpn_O1[,3:91, drop=FALSE]))
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=Idpn_N2, target_indices=89,
feature_count = 50)
MRMR_Test<-mRMR.classic("mRMRe.Filter", data=Idpn_O2, target_indices=89,
feature_count = 50)
solutions(MRMR_Test)
Idpn_O2 <- read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE, sep=",")[,-1:-2]
colnames(Idpn_O2)
datamrmr.se <- dplyr::select(Idpn_O2,14,66,76,81,29,88,67,59,22,42,57,27,28,18,7,26,52,20,74,61,70,82,72,23,86,84,60,51,65,75,53,19,73,47,79,1,69,21,39,80,83,71,85,11,63,54,24,78,87,58,class)
write.csv(datamrmr.se, file = "datamrmr50.csv",row.names = TRUE)
library(caret)
library(e1071)
library(mccr)
call_datamrmr25<-read.csv("D:/Independent O/datamrmr25.csv", header = TRUE, sep=",")[,-1]
call_datamrmr25<-read.csv("D:/independent O/datamrmr25.csv", header = TRUE, sep=",")[,-1]
call_datamrmr25<-read.csv("D:/independentO/datamrmr25.csv", header = TRUE, sep=",")[,-1]
call_datamrmr<-read.csv("D:/independent O/datamrmr50.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy2= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst1 = mccr(hasilakhir, data_test$class)
fileName1='idpn_Linear_O_mrmr50.txt'
sink(fileName1, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy2)
print(paste('MCC = ',mcc.tst1))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy3= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst2 = mccr(hasilakhir, data_test$class)
fileName2='idpn_polynomial_O_mrmr50.txt'
sink(fileName2, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy3)
print(paste('MCC = ',mcc.tst2))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy4= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst3 = mccr(hasilakhir, data_test$class)
fileName3='idpn_sigmoid_O_mrmr50.txt'
sink(fileName3, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy4)
print(paste('MCC = ',mcc.tst3))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr$class, p=0.4, list=FALSE)
data_train <- call_datamrmr[indeks_data,]
data_test <- call_datamrmr[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy5= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst4 = mccr(hasilakhir, data_test$class)
fileName4='idpn_gausian_O_mrmr50.txt'
sink(fileName4, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy5)
print(paste('MCC = ',mcc.tst4))
sink()
}
#mrmr 25
MRMR_Test2<-mRMR.classic("mRMRe.Filter", data=Idpn_O2, target_indices=89,
feature_count = 25)
#mrmr 25
MRMR_Test2<-mRMR.classic("mRMRe.Filter", data=Idpn_O2, target_indices=89,
feature_count = 25)
library(mRMRe)
Idpn_O1<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE, sep=",")
Idpn_O2<-mRMR.data(data=data.frame(Idpn_O1[,3:91, drop=FALSE]))
str(Idpn_O1)
Idpn_O1[[2]]<-as.numeric(Idpn_O1[[2]])
Idpn_O1[[3]]<-as.numeric(Idpn_O1[[3]])
Idpn_O1[[4]]<-as.numeric(Idpn_O1[[4]])
Idpn_O1[[5]]<-as.numeric(Idpn_O1[[5]])
Idpn_O1[[6]]<-as.numeric(Idpn_O1[[6]])
Idpn_O1[[7]]<-as.numeric(Idpn_O1[[7]])
Idpn_O1[[8]]<-as.numeric(Idpn_O1[[8]])
Idpn_O1[[9]]<-as.numeric(Idpn_O1[[9]])
Idpn_O1[[10]]<-as.numeric(Idpn_O1[[10]])
Idpn_O1[[10]]<-as.numeric(Idpn_O1[[10]])
Idpn_O1[[11]]<-as.numeric(Idpn_O1[[11]])
Idpn_O1[[12]]<-as.numeric(Idpn_O1[[12]])
Idpn_O1[[13]]<-as.numeric(Idpn_O1[[13]])
Idpn_O1[[14]]<-as.numeric(Idpn_O1[[14]])
Idpn_O1[[15]]<-as.numeric(Idpn_O1[[15]])
Idpn_O1[[16]]<-as.numeric(Idpn_O1[[16]])
Idpn_O1[[32]]<-as.numeric(Idpn_O1[[32]])
Idpn_O1[[42]]<-as.numeric(Idpn_O1[[42]])
Idpn_O1[[47]]<-as.numeric(Idpn_O1[[47]])
Idpn_O1[[52]]<-as.numeric(Idpn_O1[[52]])
Idpn_O1[[92]]<-as.numeric(Idpn_O1[[92]])
Idpn_O2<-mRMR.data(data=data.frame(Idpn_O1[,3:91, drop=FALSE]))
#mrmr 25
MRMR_Test2<-mRMR.classic("mRMRe.Filter", data=Idpn_O2, target_indices=89,
feature_count = 25)
solutions(MRMR_Test2)
#mrmr 75
MRMR_Test3<-mRMR.classic("mRMRe.Filter", data=Idpn_O2, target_indices=89,
feature_count = 75)
datamrmr.se <- dplyr::select(Idpn_O2,14,66,76,81,29,88,67,59,22,42,57,27,28,18,7,26,52,20,74,61,70,82,72,23,86,class)
Idpn_O3 <- read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE, sep=",")[,-1:-2]
datamrmr.se <- dplyr::select(Idpn_O3,14,66,76,81,29,88,67,59,22,42,57,27,28,18,7,26,52,20,74,61,70,82,72,23,86,class)
write.csv(datamrmr.se, file = "datamrmr25.csv",row.names = TRUE)
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy6= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst5 = mccr(hasilakhir, data_test$class)
fileName5='idpn_Linear_O_mrmr25.txt'
sink(fileName5, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy6)
print(paste('MCC = ',mcc.tst5))
sink()
}
call_datamrmr25<-read.csv("D:/independent O/datamrmr25.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy6= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst5 = mccr(hasilakhir, data_test$class)
fileName5='idpn_Linear_O_mrmr25.txt'
sink(fileName5, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy6)
print(paste('MCC = ',mcc.tst5))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy7= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst6 = mccr(hasilakhir, data_test$class)
fileName6='idpn_polynomial_O_mrmr25.txt'
sink(fileName6, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy7)
print(paste('MCC = ',mcc.tst6))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy8= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst7 = mccr(hasilakhir, data_test$class)
fileName7='idpn_sigmoid_O_mrmr25.txt'
sink(fileName7, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy8)
print(paste('MCC = ',mcc.tst7))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr25$class, p=0.4, list=FALSE)
data_train <- call_datamrmr25[indeks_data,]
data_test <- call_datamrmr25[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy9= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst8 = mccr(hasilakhir, data_test$class)
fileName8='idpn_gausian_O_mrmr25.txt'
sink(fileName8, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy9)
print(paste('MCC = ',mcc.tst8))
sink()
}
#mrmr 75
MRMR_Test3<-mRMR.classic("mRMRe.Filter", data=Idpn_O2, target_indices=89,
feature_count = 75)
solutions(MRMR_Test3)
datamrmr.se <- dplyr::select(Idpn_O3,14,66,76,81,29,88,67,59,22,42,57,27,28,18,7,26,52,20,74,61,70,82,72,23,86,84,60,51,65,75,53,19,73,47,79,1,69,21,39,80,83,71,85,11,63,54,24,78,
87,58,56,25,62,68,33,38,17,55,16,13,15,4,64,48,34,77,44,43,36,37,9,49,35,46,2,class)
write.csv(datamrmr.se, file = "datamrmr75.csv",row.names = TRUE)
call_datamrmr75<-read.csv("D:/Independent O/datamrmr75.csv", header = TRUE, sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy10= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst9 = mccr(hasilakhir, data_test$class)
fileName9='idpn_Linear_O_mrmr75.txt'
sink(fileName9, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy10)
print(paste('MCC = ',mcc.tst9))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy11= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst10 = mccr(hasilakhir, data_test$class)
fileName10='idpn_polynomial_O_mrmr75.txt'
sink(fileName10, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy11)
print(paste('MCC = ',mcc.tst10))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy12= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst11 = mccr(hasilakhir, data_test$class)
fileName11='idpn_sigmoid_O_mrmr75.txt'
sink(fileName11, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy12)
print(paste('MCC = ',mcc.tst11))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=call_datamrmr75$class, p=0.4, list=FALSE)
data_train <- call_datamrmr75[indeks_data,]
data_test <- call_datamrmr75[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy13= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst12 = mccr(hasilakhir, data_test$class)
fileName12='idpn_gausian_O_mrmr75.txt'
sink(fileName12, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy13)
print(paste('MCC = ',mcc.tst12))
sink()
}
library(caret)
library(e1071)
library(mccr)
x=1
O_Independent<-read.csv("D:/BioMedik/NegIndependent_O/NegIndependent_O/Independent_O.csv", header = TRUE,sep=",")[,-1]
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="linear")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy14= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst13 = mccr(hasilakhir, data_test$class)
fileName13='idpO_Linear_O.txt'
sink(fileName13, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy14)
print(paste('MCC = ',mcc.tst13))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="polynomial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy15= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst14 = mccr(hasilakhir, data_test$class)
fileName14='idpO_polynomial_O.txt'
sink(fileName14, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy15)
print(paste('MCC = ',mcc.tst14))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="sigmoid")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy16= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst15 = mccr(hasilakhir, data_test$class)
fileName15='idpO_sigmoid_O.txt'
sink(fileName15, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy16)
print(paste('MCC = ',mcc.tst15))
sink()
}
x=1
k_fold=5
for (i in 1:5) {
indeks_data<-createDataPartition(y=O_Independent$class, p=0.4, list=FALSE)
data_train <- O_Independent[indeks_data,]
data_test <- O_Independent[-indeks_data,]
hasil.svm <- svm(class ~., data = data_train,
type="C-classification",
kernel="radial")
print(hasil.svm)
hasilakhir <- predict(hasil.svm, data_test)
head(hasilakhir)
accuracy17= confusionMatrix(table(predict=hasilakhir,
actual=data_test$class), positive = '1')
mcc.tst16 = mccr(hasilakhir, data_test$class)
fileName16='idpO_gausiaO_O.txt'
sink(fileName16, append = T)
print(paste('=====Iterasi Ke-',x,'====='))
x=x+1
print(accuracy17)
print(paste('MCC = ',mcc.tst16))
sink()
}
